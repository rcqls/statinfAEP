/* Generated by Opal 0.5.5 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass, $hash2 = $opal.hash2, $range = $opal.range;
  $opal.add_stubs(['$each', '$tooltipContent', '$attr_accessor', '$include', '$new', '$[]', '$addChild', '$initTooltip', '$<<', '$shape', '$plot=', '$graph=', '$add', '$>=', '$call', '$method', '$to_Y', '$+', '$to_f', '$to_x', '$*', '$-', '$<', '$[]=', '$empty?', '$xylim', '$zoom', '$syncedChildren', '$synced?', '$select', '$include?', '$min', '$map', '$==', '$max', '$/', '$update', '$===', '$id', '$each_key', '$showZoom', '$>', '$graph', '$to_s', '$length', '$initStep', '$seq', '$dim', '$to_X', '$mean', '$maxPdf', '$stdDev', '$sample', '$pdf', '$type', '$map!', '$step', '$y', '$abs', '$set', '$initDistrib', '$setAsTransfOf', '$regular?', '$bounds', '$initXYLim', '$adjust', '$drawCont', '$drawDisc', '$<=', '$setParamsFrame', '$updateStatTestDistrib', '$draw', '$drawMean', '$drawSD', '$playCallables', '$nil?', '$paramsFrame', '$setDistrib', '$setAlphaFromQuantile', '$cdf', '$distrib', '$setAlpha', '$getSides', '$each_with_index', '$quantile', '$typeStatTest', '$drawAreaSide', '$setStyles', '$style', '$setPlot', '$alpha=', '$style=', '$initEvents', '$addCallable', '$attachShapes', '$attachAxis', '$setStatMode', '$reset', '$paramsFrame=', '$typeStatTest=', '$setPval', '$meanStyle=', '$sdStyle=', '$getContext', '$active=', '$updateVisible', '$join', '$power', '$p', '$inject', '$qbounds', '$to_a', '$prepare', '$quantize', '$keys', '$sort']);
  return (function($base) {
    var self = $module($base, 'Cqls');

    var def = self._proto, $scope = self._scope;
    (function($base) {
      var self = $module($base, 'Tooltip');

      var def = self._proto, $scope = self._scope;
      def.$initTooltip = function(shape) {
        var $a, $b, TMP_1, self = this;
        if (self.shape == null) self.shape = nil;

        if (shape == null) {
          shape = self.shape
        }
        return ($a = ($b = shape).$each, $a._p = (TMP_1 = function(sh){var self = TMP_1._s || this;if (sh == null) sh = nil;
        
					sh.on("rollover",function(evt) {
						//console.log("mouseover!!!"+evt.stageX/cqls.m.stage.scaleX+":"+evt.stageY/cqls.m.stage.scaleY);
						cqls.m.tooltip.text=self.$tooltipContent(sh, evt);
						cqls.m.tooltip.x=evt.stageX/cqls.m.stage.scaleX;
						cqls.m.tooltip.y=evt.stageY/cqls.m.stage.scaleY;
						cqls.m.tooltip.visible=true;
						//console.log("end mouseover");
						cqls.m.stage.update();
					});
					sh.on("rollout",function(evt) {
						//console.log("mouseout!!!");
						cqls.m.tooltip.text="";
						cqls.m.tooltip.visible=false;
						cqls.m.stage.update();
					});
				;}, TMP_1._s = self, TMP_1), $a).call($b);
      }
            ;$opal.donate(self, ["$initTooltip"]);
    })(self);

    (function($base, $super) {
      function $Plot(){};
      var self = $Plot = $klass($base, $super, 'Plot', $Plot);

      var def = $Plot._proto, $scope = $Plot._scope;
      def.dim = def.frame = def.style = def.axisShape = def.updateCalls = def.graph = def.parent = nil;
      self.$attr_accessor("parent", "frame", "style", "graph", "dim");

      self.$include($scope.Tooltip);

      def.$initialize = function(dim, style) {
        var $a, self = this;
        if (dim == null) {
          dim = $hash2(["x", "y", "w", "h"], {"x": 0, "y": 0, "w": cqls.i.dim.w, "h": cqls.i.dim.h})
        }
        if (style == null) {
          style = $hash2(["bg"], {"bg": "#88FF88"})
        }
        $a = [dim, style], self.dim = $a[0], self.style = $a[1];
        self.parent = new createjs.Container();
        self.frame = new createjs.Shape();
        self.graph = ($scope.Cqls)._scope.Graph.$new(self.dim);
        self.updateCalls = [];
        self.frame.graphics.beginLinearGradientFill(["#FFF",self.style['$[]']("bg")], [0, 1], 0, self.dim['$[]']("y")+20, 0, self.dim['$[]']("y")+self.dim['$[]']("h")+20).drawRect(self.dim['$[]']("x"),self.dim['$[]']("y"),self.dim['$[]']("w"),self.dim['$[]']("h"));
        self.$addChild(self.frame);
        self.axisShape = new createjs.Shape();
        return self.$initTooltip([self.axisShape]);
      };

      def.$attachAxis = function() {
        var self = this;
        return self.$addChild(self.axisShape, [self, "drawAxis"]);
      };

      def.$addChild = function(child, updateCall, pos) {
        var $a, self = this, shape = nil;
        if (updateCall == null) {
          updateCall = nil
        }
        if (pos == null) {
          pos = -1
        }
        shape = child;
        if (updateCall !== false && updateCall !== nil) {
          self.updateCalls['$<<']([child, updateCall])};
        if (($a = child.shape == null) === false || $a === nil) {
          shape = child.$shape();
          child['$plot='](self);
          child['$graph='](self.graph);
          self.graph.$add(child);};
        if (pos['$>='](0)) {
          return self.parent.addChildAt(shape,pos);
          } else {
          return self.parent.addChild(shape);
        };
      };

      def.$update = function() {
        var $a, $b, TMP_2, self = this;
        return ($a = ($b = self.updateCalls).$each, $a._p = (TMP_2 = function(k, v){var self = TMP_2._s || this, $a, args = nil;if (k == null) k = nil;if (v == null) v = nil;
        args = v['$[]'](2);
          if (($a = args) === false || $a === nil) {
            args = []};
          return ($a = v['$[]'](0).$method(v['$[]'](1))).$call.apply($a, [].concat(args));}, TMP_2._s = self, TMP_2), $a).call($b);
      };

      def.$drawAxis = function() {
        var self = this;
        return self.axisShape.graphics.ss(3,2).s("#000").mt(self.dim['$[]']("x"),self.graph.$to_Y(0.0)).lt(self.dim['$[]']("x")['$+'](self.dim['$[]']("w")),self.graph.$to_Y(0.0)).es();
      };

      return (def.$tooltipContent = function(shape, evt) {
        var self = this;
        return self.graph.$to_x(evt.stageX/cqls.m.stage.scaleX).$to_f();
      }, nil);
    })(self, null);

    (function($base, $super) {
      function $Graph(){};
      var self = $Graph = $klass($base, $super, 'Graph', $Graph);

      var def = $Graph._proto, $scope = $Graph._scope;
      def.marg = def.dim = def.xylim0 = def.list = def.synced = def.xylim = def.zoom = def.tr = def.syncedChildren = def.active = def.zoomShapes = nil;
      self.$attr_accessor("xylim", "dim", "active", "syncedChildren", "zoom", "marg");

      $opal.defs($scope.Graph, '$adjust', function(inter, more) {
        var self = this, l = nil;
        if (more == null) {
          more = 0
        }
        l = (inter['$[]'](1)['$-'](inter['$[]'](0)))['$*'](more);
        return [inter['$[]'](0)['$-'](more), inter['$[]'](1)['$+'](more)];
      });

      def.$initialize = function(dim, xlim, ylim, style) {
        var $a, self = this;
        if (xlim == null) {
          xlim = []
        }
        if (ylim == null) {
          ylim = []
        }
        if (style == null) {
          style = nil
        }
        $a = [dim, style], self.dim = $a[0], self.style = $a[1];
        self.marg = $hash2(["l", "r", "t", "b"], {"l": 0.1, "r": 0.1, "t": 0.2, "b": 0.1});
        if (self.marg['$[]']("l")['$<'](1)) {
          self.marg['$[]=']("l", self.dim['$[]']("w")['$*'](self.marg['$[]']("l")))};
        if (self.marg['$[]']("r")['$<'](1)) {
          self.marg['$[]=']("r", self.dim['$[]']("w")['$*'](self.marg['$[]']("r")))};
        if (self.marg['$[]']("t")['$<'](1)) {
          self.marg['$[]=']("t", self.dim['$[]']("h")['$*'](self.marg['$[]']("t")))};
        if (self.marg['$[]']("b")['$<'](1)) {
          self.marg['$[]=']("b", self.dim['$[]']("h")['$*'](self.marg['$[]']("b")))};
        self.xylim0 = $hash2(["x", "y"], {"x": xlim, "y": ylim});
        $a = [[], []], self.list = $a[0], self.active = $a[1];
        if (($a = self.xylim0['$[]']("x")['$empty?']()) === false || $a === nil) {
          self.list['$<<'](self.xylim0)};
        self.xylim = $hash2(["x", "y"], {"x": [], "y": []});
        self.tr = $hash2([], {});
        self.zoom = $hash2(["x0", "x1", "y0", "y1", "active"], {"x0": 0.0, "x1": 0.0, "y0": 0.0, "y1": 0.0, "active": false});
        return self.syncedChildren = [];
      };

      def.$syncTo = function(graph) {
        var self = this;
        self.xylim = graph.$xylim();
        self.zoom = graph.$zoom();
        graph.$syncedChildren()['$<<'](self);
        return self.synced = true;
      };

      def['$synced?'] = function() {
        var self = this;
        return self.synced;
      };

      def.$update = function(active) {
        var $a, $b, TMP_3, $c, TMP_4, $d, TMP_5, $e, TMP_6, $f, TMP_7, $g, TMP_8, self = this, list = nil;
        if (active == null) {
          active = self.active
        }
        if (($a = self['$synced?']()) === false || $a === nil) {
          list = ($a = ($b = self.list).$select, $a._p = (TMP_3 = function(e){var self = TMP_3._s || this, $a;if (e == null) e = nil;
          return ((($a = active['$empty?']()) !== false && $a !== nil) ? $a : (active['$include?'](e['$[]'](1))))}, TMP_3._s = self, TMP_3), $a).call($b);
          self.xylim['$[]']("x")['$[]='](0, ($a = ($c = list).$map, $a._p = (TMP_4 = function(e){var self = TMP_4._s || this, e2 = nil;if (e == null) e = nil;
          e2 = ((function() {if (e['$[]'](0)['$==']("element")) {
              return e['$[]'](2).$xylim()
              } else {
              return e['$[]'](2)
            }; return nil; })());
            return e2['$[]']("x")['$[]'](0);}, TMP_4._s = self, TMP_4), $a).call($c).$min());
          self.xylim['$[]']("x")['$[]='](1, ($a = ($d = list).$map, $a._p = (TMP_5 = function(e){var self = TMP_5._s || this, e2 = nil;if (e == null) e = nil;
          e2 = ((function() {if (e['$[]'](0)['$==']("element")) {
              return e['$[]'](2).$xylim()
              } else {
              return e['$[]'](2)
            }; return nil; })());
            return e2['$[]']("x")['$[]'](1);}, TMP_5._s = self, TMP_5), $a).call($d).$max());
          self.xylim['$[]']("y")['$[]='](0, ($a = ($e = list).$map, $a._p = (TMP_6 = function(e){var self = TMP_6._s || this, e2 = nil;if (e == null) e = nil;
          e2 = ((function() {if (e['$[]'](0)['$==']("element")) {
              return e['$[]'](2).$xylim()
              } else {
              return e['$[]'](2)
            }; return nil; })());
            return e2['$[]']("y")['$[]'](0);}, TMP_6._s = self, TMP_6), $a).call($e).$min());
          self.xylim['$[]']("y")['$[]='](1, ($a = ($f = list).$map, $a._p = (TMP_7 = function(e){var self = TMP_7._s || this, e2 = nil;if (e == null) e = nil;
          e2 = ((function() {if (e['$[]'](0)['$==']("element")) {
              return e['$[]'](2).$xylim()
              } else {
              return e['$[]'](2)
            }; return nil; })());
            return e2['$[]']("y")['$[]'](1);}, TMP_7._s = self, TMP_7), $a).call($f).$max());};
        $a = [(self.xylim['$[]']("x")['$[]'](1)['$+'](self.zoom['$[]']("x1"))['$-'](self.xylim['$[]']("x")['$[]'](0))['$-'](self.zoom['$[]']("x0")))['$/']((self.dim['$[]']("w")['$-'](self.marg['$[]']("l"))['$-'](self.marg['$[]']("r")))), (self.xylim['$[]']("y")['$[]'](0)['$+'](self.zoom['$[]']("y0"))['$-'](self.xylim['$[]']("y")['$[]'](1))['$-'](self.zoom['$[]']("y1")))['$/']((self.dim['$[]']("h")['$-'](self.marg['$[]']("t"))['$-'](self.marg['$[]']("b"))))], self.tr['$[]=']("ax", $a[0]), self.tr['$[]=']("ay", $a[1]);
        $a = [self.xylim['$[]']("x")['$[]'](0)['$+'](self.zoom['$[]']("x0"))['$-'](self.tr['$[]']("ax")['$*']((self.dim['$[]']("x")['$+'](self.marg['$[]']("l"))))), self.xylim['$[]']("y")['$[]'](1)['$+'](self.zoom['$[]']("y1"))['$-'](self.tr['$[]']("ay")['$*']((self.dim['$[]']("y")['$+'](self.marg['$[]']("t")))))], self.tr['$[]=']("bx", $a[0]), self.tr['$[]=']("by", $a[1]);
        if (($a = self.syncedChildren['$empty?']()) !== false && $a !== nil) {
          return nil
          } else {
          return ($a = ($g = self.syncedChildren).$each, $a._p = (TMP_8 = function(c){var self = TMP_8._s || this;if (c == null) c = nil;
          return c.$update()}, TMP_8._s = self, TMP_8), $a).call($g)
        };
      };

      def.$setActive = function(ary) {
        var self = this;
        return self.active = ary;
      };

      def.$add = function(element, mode, id) {
        var $a, self = this, $case = nil;
        if (mode == null) {
          mode = "element"
        }
        if (id == null) {
          id = nil
        }
        if (($a = self['$synced?']()) !== false && $a !== nil) {
          return nil};
        return (function() {$case = mode;if ("element"['$===']($case)) {if (($a = element.$xylim()) !== false && $a !== nil) {
          self.list['$<<'](["element", ((($a = id) !== false && $a !== nil) ? $a : element.$id()), element]);
          return self.$update();
          } else {
          return nil
        }}else if ("xylim"['$===']($case)) {self.list['$<<'](["xylim", id, element]);
        return self.$update();}else { return nil }})();
      };

      def.$addXYLim = function(id, x0, x1, y0, y1) {
        var self = this;
        return self.$add($hash2(["x", "y"], {"x": [x0, x1], "y": [y0, y1]}), "xylim", id);
      };

      def.$to_x = function(x) {
        var self = this;
        return self.tr['$[]']("ax")['$*'](x)['$+'](self.tr['$[]']("bx"));
      };

      def.$to_X = function(x) {
        var self = this;
        return (x['$-'](self.tr['$[]']("bx")))['$/'](self.tr['$[]']("ax"));
      };

      def.$to_y = function(y) {
        var self = this;
        return self.tr['$[]']("ay")['$*'](y)['$+'](self.tr['$[]']("by"));
      };

      def.$to_Y = function(y) {
        var self = this;
        return (y['$-'](self.tr['$[]']("by")))['$/'](self.tr['$[]']("ay"));
      };

      def.$to_local = function(x, y) {
        var self = this;
        return [self.tr['$[]']("ax")['$*'](x)['$+'](self.tr['$[]']("bx")), self.tr['$[]']("ay")['$*'](y)['$+'](self.tr['$[]']("by"))];
      };

      def.$to_global = function(x, y) {
        var self = this;
        return [(x['$-'](self.tr['$[]']("bx")))['$/'](self.tr['$[]']("ax")), (y['$-'](self.tr['$[]']("by")))['$/'](self.tr['$[]']("ay"))];
      };

      def.$zoomActive = function() {
        var self = this;
        return self.zoom['$[]']("active");
      };

      def.$toggleZoomTo = function(plot, type) {
        var $a, $b, TMP_9, $c, TMP_10, $d, TMP_11, self = this, keys = nil;
        if (type == null) {
          type = ["xpos", "xneg", "ypos", "reset"]
        }
        self.zoom['$[]=']("active", ($a = self.zoom['$[]']("active"), ($a === nil || $a === false)));
        if (($a = self.zoom['$[]']("active")) !== false && $a !== nil) {
          if (($a = self.zoomShapes) === false || $a === nil) {
            self.zoomShapes = $hash2([], {});
            keys = [];
            if (($a = type['$include?']("xpos")) !== false && $a !== nil) {
              keys = keys['$+'](["xposmore", "xposless"])};
            if (($a = type['$include?']("xneg")) !== false && $a !== nil) {
              keys = keys['$+'](["xnegmore", "xnegless"])};
            if (($a = type['$include?']("ypos")) !== false && $a !== nil) {
              keys = keys['$+'](["yposmore", "yposless"])};
            if (($a = type['$include?']("yneg")) !== false && $a !== nil) {
              keys = keys['$+'](["ynegmore", "ynegless"])};
            if (($a = type['$include?']("reset")) !== false && $a !== nil) {
              keys = keys['$+'](["reset"])};
            ($a = ($b = keys).$each, $a._p = (TMP_9 = function(k){var self = TMP_9._s || this;
              if (self.zoomShapes == null) self.zoomShapes = nil;
if (k == null) k = nil;
            return self.zoomShapes['$[]='](k, new createjs.Shape())}, TMP_9._s = self, TMP_9), $a).call($b);};
          ($a = ($c = self.zoomShapes).$each_key, $a._p = (TMP_10 = function(k){var self = TMP_10._s || this;
            if (self.zoomShapes == null) self.zoomShapes = nil;
if (k == null) k = nil;
          
						plot.parent.addChild(self.zoomShapes['$[]'](k))
					;}, TMP_10._s = self, TMP_10), $a).call($c);
          return self.$showZoom();
          } else {
          return ($a = ($d = self.zoomShapes).$each_key, $a._p = (TMP_11 = function(k){var self = TMP_11._s || this;
            if (self.zoomShapes == null) self.zoomShapes = nil;
if (k == null) k = nil;
          
						plot.parent.removeChild(self.zoomShapes['$[]'](k))
					;}, TMP_11._s = self, TMP_11), $a).call($d)
        };
      };

      def.$showZoom = function() {
        var $a, $b, TMP_12, self = this, size = nil, inter = nil;
        size = 40;
        inter = 15;
        return ($a = ($b = self.zoomShapes).$each_key, $a._p = (TMP_12 = function(k){var self = TMP_12._s || this, $case = nil;
          if (self.zoomShapes == null) self.zoomShapes = nil;
          if (self.dim == null) self.dim = nil;
if (k == null) k = nil;
        self.zoomShapes['$[]'](k).alpha=0.5;
          return (function() {$case = k;if ("xposmore"['$===']($case)) {return self.zoomShapes['$[]']("xposmore").graphics.c().s("#000").f("#FFF").mt(self.dim['$[]']("w")-1.5*size,self.dim['$[]']("h")['$/'](2.0)-size['$/'](2)).lt(self.dim['$[]']("w")-1.5*size,self.dim['$[]']("h")['$/'](2.0)+size['$/'](2)).lt(self.dim['$[]']("w")-0.5*size,self.dim['$[]']("h")['$/'](2.0)).cp() ;}else if ("xposless"['$===']($case)) {return self.zoomShapes['$[]']("xposless").graphics.c().s("#000").f("#FFF").mt(self.dim['$[]']("w")-1.5*size-inter,self.dim['$[]']("h")['$/'](2.0)-size['$/'](2)).lt(self.dim['$[]']("w")-1.5*size-inter,self.dim['$[]']("h")['$/'](2.0)+size['$/'](2)).lt(self.dim['$[]']("w")-2.5*size-inter,self.dim['$[]']("h")['$/'](2.0)).cp() ;}else if ("xnegmore"['$===']($case)) {return self.zoomShapes['$[]']("xnegmore").graphics.c().s("#000").f("#FFF").mt(1.5*size,self.dim['$[]']("h")['$/'](2.0)-size['$/'](2)).lt(1.5*size,self.dim['$[]']("h")['$/'](2.0)+size['$/'](2)).lt(0.5*size,self.dim['$[]']("h")['$/'](2.0)).cp() ;}else if ("xnegless"['$===']($case)) {return self.zoomShapes['$[]']("xnegless").graphics.c().s("#000").f("#FFF").mt(1.5*size+inter,self.dim['$[]']("h")['$/'](2.0)-size['$/'](2)).lt(1.5*size+inter,self.dim['$[]']("h")['$/'](2.0)+size['$/'](2)).lt(2.5*size+inter,self.dim['$[]']("h")['$/'](2.0)).cp() ;}else if ("ynegmore"['$===']($case)) {return self.zoomShapes['$[]']("ynegmore").graphics.c().s("#000").f("#FFF").mt(self.dim['$[]']("w")['$/'](2.0)-size['$/'](2),self.dim['$[]']("h")-1.5*size).lt(self.dim['$[]']("w")['$/'](2.0)+size['$/'](2),self.dim['$[]']("h")-1.5*size).lt(self.dim['$[]']("w")['$/'](2.0),self.dim['$[]']("h")-0.5*size).cp() ;}else if ("ynegless"['$===']($case)) {return self.zoomShapes['$[]']("ynegless").graphics.c().s("#000").f("#FFF").mt(self.dim['$[]']("w")['$/'](2.0)-size['$/'](2),self.dim['$[]']("h")-1.5*size-inter).lt(self.dim['$[]']("w")['$/'](2.0)+size['$/'](2),self.dim['$[]']("h")-1.5*size-inter).lt(self.dim['$[]']("w")['$/'](2.0),self.dim['$[]']("h")-2.5*size-inter).cp() ;}else if ("yposmore"['$===']($case)) {return self.zoomShapes['$[]']("yposmore").graphics.c().s("#000").f("#FFF").mt(self.dim['$[]']("w")['$/'](2.0)-size['$/'](2),1.5*size).lt(self.dim['$[]']("w")['$/'](2.0)+size['$/'](2),1.5*size).lt(self.dim['$[]']("w")['$/'](2.0),0.5*size).cp() ;}else if ("yposless"['$===']($case)) {return self.zoomShapes['$[]']("yposless").graphics.c().s("#000").f("#FFF").mt(self.dim['$[]']("w")['$/'](2.0)-size['$/'](2),1.5*size+inter).lt(self.dim['$[]']("w")['$/'](2.0)+size['$/'](2),1.5*size+inter).lt(self.dim['$[]']("w")['$/'](2.0),2.5*size+inter).cp() ;}else if ("reset"['$===']($case)) {return self.zoomShapes['$[]']("reset").graphics.c().s("#000").f("#FFF").drawRect(self.dim['$[]']("w")['$/'](2.0)-size['$/'](2), self.dim['$[]']("h")['$/'](2.0)-size['$/'](2),size,size) ;}else { return nil }})();}, TMP_12._s = self, TMP_12), $a).call($b);
      };

      return (def.$hitZoom = function(x, y) {
        var $a, $b, TMP_13, $c, self = this, select = nil, step = nil, $case = nil;
        if (($a = self.zoom['$[]']("active")) === false || $a === nil) {
          return nil};
        select = "none";
        ($a = ($b = self.zoomShapes).$each_key, $a._p = (TMP_13 = function(k){var self = TMP_13._s || this;
          if (self.zoomShapes == null) self.zoomShapes = nil;
if (k == null) k = nil;
        if(self.zoomShapes['$[]'](k).hitTest(x, y)) {select=k};;
          if (select['$==']("none")) {
            return nil
            } else {
            return ($breaker.$v = nil, $breaker)
          };}, TMP_13._s = self, TMP_13), $a).call($b);
        if (select['$==']("none")) {
          return select};
        step = (0.1)['$/'](2);
        $case = select;if ("xposmore"['$===']($case)) {($a = "x1", $c = self.zoom, $c['$[]=']($a, $c['$[]']($a)['$+'](step['$*']((self.xylim['$[]']("x")['$[]'](1)['$-'](self.xylim['$[]']("x")['$[]'](0)))))))}else if ("xposless"['$===']($case)) {if (($a = self.zoom['$[]']("x1")['$<']((step['$-']((1)['$/'](2)))['$*']((self.xylim['$[]']("x")['$[]'](1)['$-'](self.xylim['$[]']("x")['$[]'](0)))))) === false || $a === nil) {
          self.zoom['$[]=']("x1", self.zoom['$[]']("x1")['$-'](step['$*']((self.xylim['$[]']("x")['$[]'](1)['$-'](self.xylim['$[]']("x")['$[]'](0))))))}}else if ("xnegmore"['$===']($case)) {self.zoom['$[]=']("x0", self.zoom['$[]']("x0")['$-'](step['$*']((self.xylim['$[]']("x")['$[]'](1)['$-'](self.xylim['$[]']("x")['$[]'](0))))))}else if ("xnegless"['$===']($case)) {if (($a = self.zoom['$[]']("x0")['$>'](((1)['$/'](2)['$-'](step))['$*']((self.xylim['$[]']("x")['$[]'](1)['$-'](self.xylim['$[]']("x")['$[]'](0)))))) === false || $a === nil) {
          ($a = "x0", $c = self.zoom, $c['$[]=']($a, $c['$[]']($a)['$+'](step['$*']((self.xylim['$[]']("x")['$[]'](1)['$-'](self.xylim['$[]']("x")['$[]'](0)))))))}}else if ("yposmore"['$===']($case)) {($a = "y1", $c = self.zoom, $c['$[]=']($a, $c['$[]']($a)['$+'](step['$*']((self.xylim['$[]']("y")['$[]'](1)['$-'](self.xylim['$[]']("y")['$[]'](0)))))))}else if ("yposless"['$===']($case)) {if (($a = self.zoom['$[]']("y1")['$<']((step['$-']((1)['$/'](2)))['$*']((self.xylim['$[]']("y")['$[]'](1)['$-'](self.xylim['$[]']("y")['$[]'](0)))))) === false || $a === nil) {
          self.zoom['$[]=']("y1", self.zoom['$[]']("y1")['$-'](step['$*']((self.xylim['$[]']("y")['$[]'](1)['$-'](self.xylim['$[]']("y")['$[]'](0))))))}}else if ("ynegmore"['$===']($case)) {self.zoom['$[]=']("y0", self.zoom['$[]']("y1")['$-'](step['$*']((self.xylim['$[]']("y")['$[]'](1)['$-'](self.xylim['$[]']("y")['$[]'](0))))))}else if ("ynegless"['$===']($case)) {if (($a = self.zoom['$[]']("y0")['$>'](((1)['$/'](2)['$-'](step))['$*']((self.xylim['$[]']("y")['$[]'](1)['$-'](self.xylim['$[]']("y")['$[]'](0)))))) === false || $a === nil) {
          ($a = "y0", $c = self.zoom, $c['$[]=']($a, $c['$[]']($a)['$+'](step['$*']((self.xylim['$[]']("y")['$[]'](1)['$-'](self.xylim['$[]']("y")['$[]'](0)))))))}}else if ("reset"['$===']($case)) {self.zoom['$[]=']("x0", self.zoom['$[]=']("x1", self.zoom['$[]=']("y0", self.zoom['$[]=']("y1", 0.0))))};
        return select;
      }, nil);
    })(self, null);

    (function($base, $super) {
      function $Child(){};
      var self = $Child = $klass($base, $super, 'Child', $Child);

      var def = $Child._proto, $scope = $Child._scope;
      def.plot = nil;
      self.$attr_accessor("id", "plot", "graph", "shape", "style", "xylim");

      self.$include($scope.Tooltip);

      def.$initialize = function() {
        var self = this;
        return nil;
      };

      return (def.$setPlot = function(plot) {
        var self = this;
        self.plot = plot;
        return self.graph = self.plot.$graph();
      }, nil);
    })(self, null);

    (function($base, $super) {
      function $Curve(){};
      var self = $Curve = $klass($base, $super, 'Curve', $Curve);

      var def = $Curve._proto, $scope = $Curve._scope;
      def.type = def.bounds = def.length = def.summaryShapes = def.plot = def.axisShape = def.graph = def.meanStyle = def.distrib = def.step = def.sdStyle = def.x = def.y = def.shape = def.style = nil;
      self.$attr_accessor("distrib", "bounds", "kind", "type", "style", "meanStyle", "sdStyle", "summaryShapes");

      def.$initialize = function(id, type, bounds, length) {
        var $a, $b, self = this, $case = nil;
        if (id == null) {
          id = nil
        }
        if (type == null) {
          type = "cont"
        }
        if (bounds == null) {
          bounds = [0, 1]
        }
        if (length == null) {
          length = 512
        }
        if (($a = (($b = $opal.cvars['@@curveCpt']) == null ? nil : $b)) === false || $a === nil) {
          ($opal.cvars['@@curveCpt'] = -1)};
        self.id = ((($a = id) !== false && $a !== nil) ? $a : "curve"['$+']((($opal.cvars['@@curveCpt'] = (($b = $opal.cvars['@@curveCpt']) == null ? nil : $b)['$+'](1))).$to_s()));
        self.type = type;
        $case = self.type;if ("cont"['$===']($case)) {$a = [bounds, length], self.bounds = $a[0], self.length = $a[1]}else if ("disc"['$===']($case)) {self.bounds = bounds;
        self.length = self.bounds.$length();
        self.$initStep();};
        self.style = $hash2(["close", "stroke", "fill", "thickness"], {"close": true, "stroke": "#000", "fill": "rgba(200,200,255,0.3)", "thickness": 3});
        self.meanStyle = $hash2(["thickness", "stroke"], {"thickness": 3, "stroke": "#000"});
        self.sdStyle = $hash2(["thickness", "stroke"], {"thickness": 3, "stroke": "#000"});
        self.shape = new createjs.Shape();
        self.x = $scope.Cqls.$seq(self.bounds['$[]'](0), self.bounds['$[]'](1), self.length);
        self.kind = "density";
        self.summaryShapes = [new createjs.Shape(), new createjs.Shape()];
        self.axisShape = new createjs.Shape();
        return self.$initTooltip(self.summaryShapes);
      };

      def.$attachAxis = function(ratio) {
        var self = this;
        return self.plot.$addChild(self.axisShape, [self, "drawAxis", [ratio]]);
      };

      def.$drawAxis = function(ratio) {
        var self = this;
        self.axisShape.visible=true;
        return self.axisShape.graphics.c().s("#000").ss(1).mt(self.graph.$dim()['$[]']("x"),self.graph.$dim()['$[]']("h")['$*'](ratio)).lt(self.graph.$dim()['$[]']("x")['$+'](self.graph.$dim()['$[]']("w")),self.graph.$dim()['$[]']("h")['$*'](ratio));
      };

      def.$attachShapes = function() {
        var self = this;
        self.plot.$addChild(self.summaryShapes['$[]'](0), [self, "drawMean"]);
        return self.plot.$addChild(self.summaryShapes['$[]'](1), [self, "drawSD"]);
      };

      def.$drawMean = function() {
        var self = this;
        
				self.summaryShapes['$[]'](0).graphics.c().s(self.meanStyle['$[]']("stroke")).ss(self.meanStyle['$[]']("thickness")).mt(0,self.graph.$dim()['$[]']("y")).lt(0,self.graph.$dim()['$[]']("y")['$+'](self.graph.$dim()['$[]']("h")))
				self.summaryShapes['$[]'](0).x=self.graph.$to_X(self.distrib.$mean());
				//self.summaryShapes['$[]'](0).y=self.graph.$dim()['$[]']("y");
			;
      };

      def.$drawSD = function() {
        var $a, self = this, x = nil, y = nil, h = nil;
        $a = [10, 10], x = $a[0], y = $a[1];
        h = self.distrib.$maxPdf()['$/'](2.0);
        if (self.type['$==']("disc")) {
          h = h['$/'](self.step)};
        h = self.graph.$to_Y(h);
        
				self.summaryShapes['$[]'](1).graphics.c().s(self.sdStyle['$[]']("stroke")).ss(self.sdStyle['$[]']("thickness"))		
				.mt(self.graph.$to_X(self.distrib.$mean()['$-'](self.distrib.$stdDev()))['$-'](self.graph.$to_X(self.distrib.$mean()))+x,h-y)
				.lt(self.graph.$to_X(self.distrib.$mean()['$-'](self.distrib.$stdDev()))['$-'](self.graph.$to_X(self.distrib.$mean())),h)
				.lt(self.graph.$to_X(self.distrib.$mean()['$-'](self.distrib.$stdDev()))['$-'](self.graph.$to_X(self.distrib.$mean()))+x,h+y)
				.mt(self.graph.$to_X(self.distrib.$mean()['$-'](self.distrib.$stdDev()))['$-'](self.graph.$to_X(self.distrib.$mean())),h)
				.lt(self.graph.$to_X(self.distrib.$mean()['$+'](self.distrib.$stdDev()))['$-'](self.graph.$to_X(self.distrib.$mean())),h)
				.lt(self.graph.$to_X(self.distrib.$mean()['$+'](self.distrib.$stdDev()))['$-'](self.graph.$to_X(self.distrib.$mean()))-x,h-y)
				.mt(self.graph.$to_X(self.distrib.$mean()['$+'](self.distrib.$stdDev()))['$-'](self.graph.$to_X(self.distrib.$mean())),h)
				.lt(self.graph.$to_X(self.distrib.$mean()['$+'](self.distrib.$stdDev()))['$-'](self.graph.$to_X(self.distrib.$mean()))-x,h+y)
				self.summaryShapes['$[]'](1).x=self.graph.$to_X(self.distrib.$mean())
			;
      };

      def.$sample = function(n) {
        var self = this;
        if (n == null) {
          n = 1
        }
        return self.distrib.$sample(n);
      };

      def.$y = function(x) {
        var $a, $b, TMP_14, self = this, y = nil;
        y = self.distrib.$pdf(x);
        if (self.distrib.$type()['$==']("disc")) {
          ($a = ($b = y)['$map!'], $a._p = (TMP_14 = function(e){var self = TMP_14._s || this;
            if (self.distrib == null) self.distrib = nil;
if (e == null) e = nil;
          return e['$/'](self.distrib.$step())}, TMP_14._s = self, TMP_14), $a).call($b)};
        y = y.map(function(e) {return Math.random()*e;});
        return y;
      };

      def.$xy = function(n) {
        var self = this, x = nil, y = nil;
        if (n == null) {
          n = 1
        }
        x = self.$sample(n);
        y = self.$y(x);
        return $hash2(["x", "y"], {"x": x, "y": y});
      };

      def.$initStep = function() {
        var $a, $b, TMP_15, self = this;
        return self.step = ($a = ($b = ($range(1, self.bounds.$length(), true))).$map, $a._p = (TMP_15 = function(i){var self = TMP_15._s || this;
          if (self.bounds == null) self.bounds = nil;
if (i == null) i = nil;
        return (self.bounds['$[]'](i)['$-'](self.bounds['$[]'](i['$-'](1)))).$abs()}, TMP_15._s = self, TMP_15), $a).call($b).$min().$to_f();
      };

      def.$setDistrib = function(name, params) {
        var self = this;
        self.distrib = $scope.Distribution.$new();
        self.distrib.$set(name, params);
        return self.$initDistrib();
      };

      def.$setDistribAs = function(dist) {
        var self = this;
        self.distrib = dist;
        return self.$initDistrib();
      };

      def.$setDistribAsTransf = function(transf, dist) {
        var self = this;
        self.distrib = $scope.Distribution.$new();
        self.distrib.$setAsTransfOf(dist, transf);
        return self.$initDistrib();
      };

      def['$regular?'] = function() {
        var self = this;
        return self.distrib['$regular?']();
      };

      def.$initDistrib = function() {
        var $a, $b, TMP_16, self = this, $case = nil;
        self.type = self.distrib.$type();
        self.bounds = self.distrib.$bounds();
        $case = self.type;if ("cont"['$===']($case)) {self.x = $scope.Cqls.$seq(self.bounds['$[]'](0), self.bounds['$[]'](1), self.length)}else if ("disc"['$===']($case)) {self.$initStep();
        self.x = self.bounds;};
        self.y = self.distrib.$pdf(self.x);
        if (self.type['$==']("disc")) {
          ($a = ($b = self.y)['$map!'], $a._p = (TMP_16 = function(e){var self = TMP_16._s || this;
            if (self.step == null) self.step = nil;
if (e == null) e = nil;
          return e['$/'](self.step)}, TMP_16._s = self, TMP_16), $a).call($b)};
        return self.$initXYLim();
      };

      def.$initXYLim = function() {
        var self = this, xlim = nil;
        xlim = (function() {if (self.type['$==']("cont")) {
          return self.bounds
          } else {
          return [self.bounds['$[]'](0)['$-'](self.step['$/'](2.0)), self.bounds['$[]'](-1)['$+'](self.step['$/'](2.0))]
        }; return nil; })();
        return self.xylim = $hash2(["x", "y"], {"x": $scope.Graph.$adjust(xlim), "y": $scope.Graph.$adjust([0, self.y.$max()])});
      };

      def.$draw = function(shape, graph, style) {
        var self = this;
        if (shape == null) {
          shape = self.shape
        }
        if (graph == null) {
          graph = self.graph
        }
        if (style == null) {
          style = self.style
        }
        if (self.type['$==']("cont")) {
          return self.$drawCont(shape, graph, style)
          } else {
          return self.$drawDisc(shape, graph, style)
        };
      };

      def.$drawCont = function(shape, graph, style) {
        var $a, $b, TMP_17, self = this;
        if (shape == null) {
          shape = self.shape
        }
        if (graph == null) {
          graph = self.graph
        }
        if (style == null) {
          style = self.style
        }
        
				shape.graphics.clear();
				if(style['$[]']("close")) {shape.graphics.f(style['$[]']("fill"));}
				shape.graphics.s(style['$[]']("stroke")).ss(style['$[]']("thickness"));
			;
        shape.x=graph.$to_X(self.distrib.$mean());
        shape.graphics.mt(graph.$to_X(self.x['$[]'](0))-shape.x,graph.$to_Y(0.0));
        ($a = ($b = ($range(0, self.x.$length(), true))).$each, $a._p = (TMP_17 = function(i){var self = TMP_17._s || this;
          if (self.x == null) self.x = nil;
          if (self.y == null) self.y = nil;
if (i == null) i = nil;
        return shape.graphics.lt(graph.$to_X(self.x['$[]'](i))-shape.x,graph.$to_Y(self.y['$[]'](i)));}, TMP_17._s = self, TMP_17), $a).call($b);
        shape.graphics.lt(graph.$to_X(self.x['$[]'](-1))-shape.x,graph.$to_Y(0.0));
        if (($a = style['$[]']("close")) !== false && $a !== nil) {
          return shape.graphics.cp();
          } else {
          return nil
        };
      };

      def.$drawDisc = function(shape, graph, style) {
        var $a, $b, TMP_18, self = this, s = nil;
        if (shape == null) {
          shape = self.shape
        }
        if (graph == null) {
          graph = self.graph
        }
        if (style == null) {
          style = self.style
        }
        s = self.step['$/'](2.0);
        
				shape.graphics.clear();
				if(style['$[]']("close")) {shape.graphics.f(style['$[]']("fill"));}
				shape.graphics.s(style['$[]']("stroke")).ss(style['$[]']("thickness"));
			;
        return ($a = ($b = ($range(0, self.x.$length(), true))).$each, $a._p = (TMP_18 = function(i){var self = TMP_18._s || this, $a;
          if (self.x == null) self.x = nil;
          if (self.y == null) self.y = nil;
if (i == null) i = nil;
        
				 	shape.graphics.mt(graph.$to_X(self.x['$[]'](i)['$-'](s)),graph.$to_Y(0.0))
					.lt(graph.$to_X(self.x['$[]'](i)['$-'](s)),graph.$to_Y(self.y['$[]'](i)))
					.lt(graph.$to_X(self.x['$[]'](i)['$+'](s)),graph.$to_Y(self.y['$[]'](i)))
			 		.lt(graph.$to_X(self.x['$[]'](i)['$+'](s)),graph.$to_Y(0.0))
			 	;
          if (($a = style['$[]']("close")) !== false && $a !== nil) {
            return shape.graphics.cp();
            } else {
            return nil
          };}, TMP_18._s = self, TMP_18), $a).call($b);
      };

      def.$drawAreaSide = function(lim, side, shape, style, graph) {
        var $a, $b, $c, TMP_19, self = this, $case = nil, from = nil, to = nil;
        if (style == null) {
          style = self.style
        }
        if (graph == null) {
          graph = self.graph
        }
        $case = side;if ("left"['$===']($case)) {$a = [0, 0], from = $a[0], to = $a[1];
        while (($b = (($c = to['$<'](self.x.$length()['$-'](1))) ? self.x['$[]'](to)['$<='](lim) : $c)) !== false && $b !== nil) {
        to = to['$+'](1)};}else if ("right"['$===']($case)) {$a = [self.x.$length()['$-'](1), self.x.$length()['$-'](1)], from = $a[0], to = $a[1];
        while (($b = (($c = from['$>'](0)) ? self.x['$[]'](from)['$>='](lim) : $c)) !== false && $b !== nil) {
        from = from['$-'](1)};}else if ("between"['$===']($case)) {$a = [0, self.x.$length()['$-'](1)], from = $a[0], to = $a[1];
        while (($b = (($c = from['$<'](self.x.$length()['$-'](1))) ? self.x['$[]'](from)['$<'](lim['$[]'](0)) : $c)) !== false && $b !== nil) {
        from = from['$+'](1)};
        while (($b = (($c = to['$>'](0)) ? self.x['$[]'](to)['$>'](lim['$[]'](1)) : $c)) !== false && $b !== nil) {
        to = to['$-'](1)};};
        
				shape.graphics.clear();
				shape.graphics.f(style['$[]']("fill"));
				shape.graphics.s(style['$[]']("stroke")).ss(style['$[]']("thickness"));
			;
        shape.x=graph.$to_X(self.distrib.$mean());
        shape.graphics.mt(graph.$to_X(self.x['$[]'](from))-shape.x,graph.$to_Y(0.0));
        ($a = ($b = ($range(from, to, false))).$each, $a._p = (TMP_19 = function(i){var self = TMP_19._s || this;
          if (self.x == null) self.x = nil;
          if (self.y == null) self.y = nil;
if (i == null) i = nil;
        return shape.graphics.lt(graph.$to_X(self.x['$[]'](i))-shape.x,graph.$to_Y(self.y['$[]'](i)));}, TMP_19._s = self, TMP_19), $a).call($b);
        shape.graphics.lt(graph.$to_X(self.x['$[]'](to))-shape.x,graph.$to_Y(0.0));
        return shape.graphics.cp();
      };

      return (def.$tooltipContent = function(shape, evt) {
        var $a, self = this;
        if (($a = shape == self.summaryShapes['$[]'](0)) !== false && $a !== nil) {
          return self.distrib.$mean().$to_s()
        } else if (($a = shape==self.summaryShapes['$[]'](1)) !== false && $a !== nil) {
          return self.distrib.$stdDev().$to_s()
          } else {
          return nil
        };
      }, nil);
    })(self, $scope.Child);

    (function($base) {
      var self = $module($base, 'Callables');

      var def = self._proto, $scope = self._scope;
      def.$suspendCallables = function(tag) {
        var self = this;
        if (self.activeCallables == null) self.activeCallables = nil;

        if (tag == null) {
          tag = "default"
        }
        return self.activeCallables['$[]='](tag, false);
      };

      def.$resumeCallables = function(tag) {
        var self = this;
        if (self.activeCallables == null) self.activeCallables = nil;

        if (tag == null) {
          tag = "default"
        }
        return self.activeCallables['$[]='](tag, true);
      };

      def.$addCallable = function(call, tag) {
        var $a, self = this;
        if (self.callables == null) self.callables = nil;
        if (self.activeCallables == null) self.activeCallables = nil;

        if (tag == null) {
          tag = "default"
        }
        if (($a = self.callables) === false || $a === nil) {
          $a = [$hash2([], {}), $hash2([], {})], self.callables = $a[0], self.activeCallables = $a[1]};
        if (($a = self.callables['$[]'](tag)) === false || $a === nil) {
          $a = [[], []], self.callables['$[]='](tag, $a[0]), self.activeCallables['$[]='](tag, $a[1])};
        return self.callables['$[]'](tag)['$<<'](call);
      };

      def.$playCallables = function(tag) {
        var $a, $b, TMP_20, self = this;
        if (self.callables == null) self.callables = nil;
        if (self.activeCallables == null) self.activeCallables = nil;

        if (tag == null) {
          tag = "default"
        }
        if (($a = ($b = self.callables['$[]'](tag), $b !== false && $b !== nil ?self.activeCallables['$[]'](tag) : $b)) !== false && $a !== nil) {
          return ($a = ($b = self.callables['$[]'](tag)).$each, $a._p = (TMP_20 = function(v){var self = TMP_20._s || this, $a, args = nil;if (v == null) v = nil;
          args = v['$[]'](2);
            if (($a = args) === false || $a === nil) {
              args = []};
            return ($a = v['$[]'](0).$method(v['$[]'](1))).$call.apply($a, [].concat(args));}, TMP_20._s = self, TMP_20), $a).call($b)
          } else {
          return nil
        };
      };
            ;$opal.donate(self, ["$suspendCallables", "$resumeCallables", "$addCallable", "$playCallables"]);
    })(self);

    (function($base, $super) {
      function $StatTestCurve(){};
      var self = $StatTestCurve = $klass($base, $super, 'StatTestCurve', $StatTestCurve);

      var def = $StatTestCurve._proto, $scope = $StatTestCurve._scope, TMP_21;
      def.styles = def.paramsFrame = def.typeStatTest = def.paramsStatTest = nil;
      self.$attr_accessor("typeStatTest", "paramsFrame", "paramsStatTest");

      self.$include($scope.Callables);

      def.$initialize = TMP_21 = function(type, params) {
        var self = this, $iter = TMP_21._p, $yield = $iter || nil;
        if (type == null) {
          type = "p"
        }
        if (params == null) {
          params = [1000, 0.15]
        }
        TMP_21._p = null;
        $opal.find_super_dispatcher(self, 'initialize', TMP_21, null).apply(self, []);
        self.$setParamsFrame(type, params);
        return self.styles;
      };

      def.$setStyle = function() {
        var self = this;
        return nil;
      };

      def.$initEvents = function(types) {
        var $a, $b, TMP_22, self = this;
        if (types == null) {
          types = ["mean", "sd"]
        }
        return ($a = ($b = types).$each, $a._p = (TMP_22 = function(type){var self = TMP_22._s || this, $case = nil;
          if (self.summaryShapes == null) self.summaryShapes = nil;
          if (self.typeStatTest == null) self.typeStatTest = nil;
          if (self.paramsFrame == null) self.paramsFrame = nil;
          if (self.graph == null) self.graph = nil;
          if (self.distrib == null) self.distrib = nil;
          if (self.delta == null) self.delta = nil;
          if (self.sdX == null) self.sdX = nil;
          if (self.oldSD == null) self.oldSD = nil;
if (type == null) type = nil;
        return (function() {$case = type;if ("mean"['$===']($case)) {
						self.summaryShapes['$[]'](0).on("pressmove", function(evt) {
							var x=evt.stageX/cqls.m.stage.scaleX;
							if(self.typeStatTest['$==']("p")){
								self.paramsFrame['$[]='](1, self.graph.$to_x(x)) 
								self.$updateStatTestDistrib()
								//console.log("mean="+self.distrib.$mean()+",sd="+self.distrib.$stdDev())
								self.$draw();
								self.$drawMean();
								self.$drawSD();
								self.$playCallables();
								cqls.m.stage.update();
						    } else if(self.typeStatTest['$==']("m")) {
						    	//console.log("MEAN pressed");
						    	self.paramsFrame['$[]='](1, self.graph.$to_x(x))
								self.$updateStatTestDistrib()
								//console.log("mean="+self.distrib.$mean()+",sd="+self.distrib.$stdDev())
								self.$draw();
								self.$drawMean();
								self.$drawSD();
								//console.log("MEAN pressed -> delta:"+self.delta);
								self.$playCallables();
								//console.log("MEAN OUT");
							}
						    cqls.m.stage.update();
						});
						self.summaryShapes['$[]'](0).on("pressup", function(evt) { 
							var x=evt.stageX/cqls.m.stage.scaleX;
							//console.log("TTTTTypeStatTest:"+self.typeStatTest)
							if(self.typeStatTest['$==']("p")){
								//console.log("prop up");
								self.paramsFrame['$[]='](1, self.graph.$to_x(x))
								self.$updateStatTestDistrib()
								//console.log("mean="+self.distrib.$mean()+",sd="+self.distrib.$stdDev())
								self.$draw();
								self.$drawSD();
							} else if(self.typeStatTest['$==']("m")) {
								//console.log("MEANNNN UUUUUPPPPP");
								self.paramsFrame['$[]='](1, self.graph.$to_x(x))
								self.$updateStatTestDistrib()
								//console.log("mean="+self.distrib.$mean()+",sd="+self.distrib.$stdDev())
							} 
							cqls.m.stage.update();
						});
					;}else if ("sd"['$===']($case)) {
						self.summaryShapes['$[]'](1).on("mousedown", function(evt) {
							if(self.typeStatTest['$==']("m")) {
								//console.log("sd down");
								self.sdX=evt.stageX/cqls.m.stage.scaleX;
								self.oldSD = self.graph.$to_X(self.distrib.$stdDev())['$-'](self.graph.$to_X(0.0));
							}
						});
						self.summaryShapes['$[]'](1).on("pressmove", function(evt) {
							var x=evt.stageX/cqls.m.stage.scaleX;
							if(self.typeStatTest['$==']("m")) {
								//console.log("sd pressed");
								
								var newSD=self.oldSD+x-self.sdX;
						    	//self.summaryShapes['$[]'](1).scaleX=newSD/oldSD;
						    	//point at the right in the real scale then substracted from real mean
						    	//Do not forget the sqrt(n) because it is the 
						    	self.paramsFrame['$[]='](2, self.graph.$to_x(self.graph.$to_X(0.0)['$+'](self.oldSD)['$+'](x)['$-'](self.sdX))['$*'](Math.sqrt(self.paramsFrame['$[]'](0))));
						    	self.$updateStatTestDistrib()
						    	self.$draw();
						    	self.$drawSD();
						    	self.$playCallables("sd");
						    	//console.log("mean="+self.distrib.$mean()+",sd="+self.distrib.$stdDev())
						    	cqls.m.stage.update();
						    }
						});
					;}else { return nil }})()}, TMP_22._s = self, TMP_22), $a).call($b);
      };

      def.$paramsFrameAtFrom = function(key, statTest2, key2) {
        var $a, self = this;
        if (key2 == null) {
          key2 = nil
        }
        if (($a = key2['$nil?']()) !== false && $a !== nil) {
          key2 = key};
        return self.paramsFrame['$[]='](key, statTest2.$paramsFrame()['$[]'](key2));
      };

      def.$setParamsFrame = function(type, params) {
        var self = this;
        if (type == null) {
          type = "p"
        }
        if (params == null) {
          params = [1000, 0.15]
        }
        self.typeStatTest = type;
        self.paramsFrame = params;
        return self.$updateStatTestDistrib();
      };

      return (def.$updateStatTestDistrib = function() {
        var self = this, $case = nil, paramsFrame = nil;
        self.paramsStatTest = (function() {$case = self.typeStatTest;if ("p"['$===']($case)) {return [self.paramsFrame['$[]'](1), Math.sqrt(self.paramsFrame['$[]'](1)['$*'](((1)['$-'](self.paramsFrame['$[]'](1))))['$/'](self.paramsFrame['$[]'](0)))]}else if ("m"['$===']($case)) {return [self.paramsFrame['$[]'](1), self.paramsFrame['$[]'](2)['$/'](Math.sqrt(self.paramsFrame['$[]'](0)))]}else if ("dp0"['$===']($case) || "dm0"['$===']($case)) {return [0, 1]}else if ("dp"['$===']($case) || "dp1"['$===']($case)) {paramsFrame = (function() {if (self.typeStatTest['$==']("dp1")) {
          return [self.paramsFrame['$[]'](0).$paramsFrame()['$[]'](0), self.paramsFrame['$[]'](1), self.paramsFrame['$[]'](0).$paramsFrame()['$[]'](1)]
          } else {
          return self.paramsFrame
        }; return nil; })();
        return [(paramsFrame['$[]'](2)['$-'](paramsFrame['$[]'](1)))['$/'](Math.sqrt(paramsFrame['$[]'](1)['$*'](((1)['$-'](paramsFrame['$[]'](1))))['$/'](paramsFrame['$[]'](0)))), Math.sqrt((paramsFrame['$[]'](2)['$*'](((1)['$-'](paramsFrame['$[]'](2)))))['$/']((paramsFrame['$[]'](1)['$*'](((1)['$-'](paramsFrame['$[]'](1)))))))];}else if ("dm"['$===']($case) || "dm1"['$===']($case)) {paramsFrame = (function() {if (self.typeStatTest['$==']("dm1")) {
          return [self.paramsFrame['$[]'](0).$paramsFrame()['$[]'](0), self.paramsFrame['$[]'](1), self.paramsFrame['$[]'](0).$paramsFrame()['$[]'](1), self.paramsFrame['$[]'](0).$paramsFrame()['$[]'](2)]
          } else {
          return self.paramsFrame
        }; return nil; })();
        return [(paramsFrame['$[]'](2)['$-'](paramsFrame['$[]'](1)))['$/'](paramsFrame['$[]'](3))['$*'](Math.sqrt(paramsFrame['$[]'](0))), 1];}else { return nil }})();
        return self.$setDistrib("normal", self.paramsStatTest);
      }, nil);
    })(self, $scope.Curve);

    (function($base, $super) {
      function $AcceptanceRegion(){};
      var self = $AcceptanceRegion = $klass($base, $super, 'AcceptanceRegion', $AcceptanceRegion);

      var def = $AcceptanceRegion._proto, $scope = $AcceptanceRegion._scope;
      def.shapes = def.graph = def.alpha = def.context = def.statTestH0 = def.side = def.sides = def.plot = nil;
      self.$attr_accessor("alpha", "side", "style", "shapes");

      self.$include($scope.Callables);

      def.$initialize = function(statTestH0, context, id) {
        var $a, $b, self = this;
        if (id == null) {
          id = nil
        }
        if (($a = (($b = $opal.cvars['@@limitCpt']) == null ? nil : $b)) === false || $a === nil) {
          ($opal.cvars['@@limitCpt'] = -1)};
        self.id = ((($a = id) !== false && $a !== nil) ? $a : "Lim"['$+']((($opal.cvars['@@limitCpt'] = (($b = $opal.cvars['@@limitCpt']) == null ? nil : $b)['$+'](1))).$to_s()));
        $a = [statTestH0, context], self.statTestH0 = $a[0], self.context = $a[1];
        self.style = $hash2(["stroke", "thickness"], {"stroke": "#0F0", "thickness": 3});
        self.sides = [];
        self.shapes = [new createjs.Shape(), new createjs.Shape()];
        self.alpha = "context";
        self.side = "context";
        return self.$initTooltip(self.shapes);
      };

      def.$initEvents = function() {
        var self = this;
        

				self.shapes['$[]'](0).on("pressmove", function(evt) {
					var x=evt.stageX/cqls.m.stage.scaleX;
					 
					self.$setAlphaFromQuantile(self.graph.$to_x(x), "left") 
					self.$draw()
					self.$playCallables();
					cqls.m.stage.update();
			     });

				self.shapes['$[]'](1).on("pressmove", function(evt) {
					var x=evt.stageX/cqls.m.stage.scaleX;
					 
					self.$setAlphaFromQuantile(self.graph.$to_x(x), "right") 
					self.$draw()
					self.$playCallables();
					cqls.m.stage.update();
			     });
			;
      };

      def.$setAlpha = function(alpha) {
        var self = this, $case = nil;
        return (function() {$case = self.alpha;if ("context"['$===']($case)) {return self.context['$[]=']("alpha", alpha)}else if ("paramPval"['$===']($case)) {return self.context['$[]=']("paramPval", alpha)}else if ("deltaPval"['$===']($case)) {return self.context['$[]=']("deltaPval", alpha)}else {return self.alpha = alpha}})();
      };

      def.$setAlphaFromQuantile = function(q, from) {
        var self = this, $case = nil, alpha = nil;
        if (from == null) {
          from = "right"
        }
        $case = from;if ("right"['$===']($case)) {alpha = (1)['$-'](self.statTestH0.$distrib().$cdf(q))}else if ("left"['$===']($case)) {alpha = self.statTestH0.$distrib().$cdf(q)};
        if (((function() {if (self.side['$==']("context")) {
          return self.context['$[]']("side")
          } else {
          return self.side
        }; return nil; })())['$==']("!=")) {
          alpha = (2)['$*'](alpha)};
        alpha = [alpha, 1.0].$min();
        return self.$setAlpha(alpha);
      };

      def.$getSides = function() {
        var self = this, side = nil, alpha = nil, $case = nil;
        side = (function() {if (self.side['$==']("context")) {
          return self.context['$[]']("side")
          } else {
          return self.side
        }; return nil; })();
        alpha = (function() {$case = self.alpha;if ("context"['$===']($case)) {return self.context['$[]']("alpha")}else if ("paramPval"['$===']($case)) {return self.context['$[]']("paramPval")}else if ("deltaPval"['$===']($case)) {return self.context['$[]']("deltaPval")}else {return self.alpha}})();
        return (function() {$case = side;if (">"['$===']($case)) {return self.sides = [0, (1)['$-'](alpha)]}else if ("<"['$===']($case)) {return self.sides = [alpha, 0]}else if ("!="['$===']($case)) {return self.sides = [alpha['$/'](2.0), (1)['$-'](alpha['$/'](2.0))]}else { return nil }})();
      };

      def.$draw = function() {
        var $a, $b, TMP_23, self = this;
        self.$getSides();
        return ($a = ($b = self.sides).$each_with_index, $a._p = (TMP_23 = function(s, i){var self = TMP_23._s || this;
          if (self.shapes == null) self.shapes = nil;
          if (self.style == null) self.style = nil;
          if (self.graph == null) self.graph = nil;
          if (self.statTestH0 == null) self.statTestH0 = nil;
if (s == null) s = nil;if (i == null) i = nil;
        if (s['$>'](0)) {
            
						self.shapes['$[]'](i).graphics.c().s(self.style['$[]']("stroke")).ss(self.style['$[]']("thickness")).mt(0,self.graph.$dim()['$[]']("y")).lt(0,self.graph.$dim()['$[]']("y")['$+'](self.graph.$dim()['$[]']("h")))
						self.shapes['$[]'](i).x=self.graph.$to_X(self.statTestH0.$distrib().$quantile(s));
					;
            } else {
            return self.shapes['$[]'](i).graphics.c();
          }}, TMP_23._s = self, TMP_23), $a).call($b);
      };

      def.$attachShapes = function() {
        var self = this;
        self.plot.$addChild(self.shapes['$[]'](0), [self, "draw"]);
        return self.plot.$addChild(self.shapes['$[]'](1), [self, "draw"]);
      };

      return (def.$tooltipContent = function(shape, evt) {
        var self = this;
        return self.graph.$to_x(shape.x).$to_s();
      }, nil);
    })(self, $scope.Child);

    (function($base, $super) {
      function $AreaRisk(){};
      var self = $AreaRisk = $klass($base, $super, 'AreaRisk', $AreaRisk);

      var def = $AreaRisk._proto, $scope = $AreaRisk._scope;
      def.shapes = def.side = def.context = def.statTest = def.alpha = def.sides = def.style = def.graph = def.plot = nil;
      self.$attr_accessor("alpha", "side", "style", "shapes");

      def.$initialize = function(statTest, context, id) {
        var $a, $b, self = this;
        if (id == null) {
          id = nil
        }
        if (($a = (($b = $opal.cvars['@@areaCpt']) == null ? nil : $b)) === false || $a === nil) {
          ($opal.cvars['@@areaCpt'] = -1)};
        self.id = ((($a = id) !== false && $a !== nil) ? $a : "Risk"['$+']((($opal.cvars['@@areaCpt'] = (($b = $opal.cvars['@@areaCpt']) == null ? nil : $b)['$+'](1))).$to_s()));
        $a = [statTest, context], self.statTest = $a[0], self.context = $a[1];
        self.style = $hash2(["stroke", "fill", "thickness"], {"stroke": "rgba(255,0,0,.6)", "fill": "rgba(255,0,0,.3)", "thickness": 1});
        self.sides = [];
        self.shapes = [new createjs.Shape(), new createjs.Shape()];
        self.alpha = "context";
        self.side = "context";
        return self.$initTooltip(self.shapes);
      };

      def.$getSides = function() {
        var self = this, side = nil, statTestQuantile = nil, alpha = nil, $case = nil, param = nil;
        side = (function() {if (self.side['$==']("context")) {
          return self.context['$[]']("side")
          } else {
          return self.side
        }; return nil; })();
        statTestQuantile = self.statTest;
        alpha = (function() {$case = self.alpha;if ("context"['$===']($case)) {return self.context['$[]']("alpha")}else if ("paramH0"['$===']($case)) {statTestQuantile = self.context['$[]']("paramEstH0");
        return self.context['$[]']("alpha");}else if ("deltaH0"['$===']($case)) {statTestQuantile = self.context['$[]']("deltaEstH0");
        return self.context['$[]']("alpha");}else if ("paramEstLim"['$===']($case)) {statTestQuantile = self.context['$[]']("paramEstH0");
        return self.context['$[]']("paramPval");}else if ("deltaEstLim"['$===']($case)) {statTestQuantile = self.context['$[]']("deltaEstH0");
        return self.context['$[]']("deltaPval");}else {return self.alpha}})();
        param = (function() {$case = self.statTest.$typeStatTest();if ("dp0"['$===']($case) || "dm0"['$===']($case) || "dp1"['$===']($case) || "dm1"['$===']($case)) {return self.statTest.$paramsFrame()['$[]'](0).$paramsFrame()['$[]'](1)}else {return self.statTest.$paramsFrame()['$[]'](1)}})();
        return (function() {$case = side;if (">"['$===']($case)) {if (param['$>'](self.context['$[]']("ref"))) {
          return self.sides = [statTestQuantile.$distrib().$quantile((1)['$-'](alpha)), nil]
          } else {
          return self.sides = [nil, statTestQuantile.$distrib().$quantile((1)['$-'](alpha))]
        }}else if ("<"['$===']($case)) {if (param['$<'](self.context['$[]']("ref"))) {
          return self.sides = [nil, statTestQuantile.$distrib().$quantile(alpha)]
          } else {
          return self.sides = [statTestQuantile.$distrib().$quantile(alpha), nil]
        }}else if ("!="['$===']($case)) {if ((Math.abs(param['$-'](self.context['$[]']("ref"))))['$<'](0.0001)) {
          return self.sides = [statTestQuantile.$distrib().$quantile(alpha['$/'](2.0)), statTestQuantile.$distrib().$quantile((1)['$-'](alpha['$/'](2.0)))]
          } else {
          return self.sides = ["between", statTestQuantile.$distrib().$quantile(alpha['$/'](2.0)), statTestQuantile.$distrib().$quantile((1)['$-'](alpha['$/'](2.0)))]
        }}else { return nil }})();
      };

      def.$draw = function() {
        var $a, $b, TMP_24, self = this, style = nil, graph = nil;
        self.$getSides();
        if (self.sides.$length()['$=='](3)) {
          self.statTest.$drawAreaSide(self.sides['$[]']($range(1, -1, false)), "between", self.shapes['$[]'](0), style = self.style, graph = self.graph);
          return self.shapes['$[]'](1).graphics.c();
          } else {
          return ($a = ($b = self.sides).$each_with_index, $a._p = (TMP_24 = function(side, i){var self = TMP_24._s || this;
            if (self.statTest == null) self.statTest = nil;
            if (self.shapes == null) self.shapes = nil;
            if (self.style == null) self.style = nil;
            if (self.graph == null) self.graph = nil;
if (side == null) side = nil;if (i == null) i = nil;
          if (side !== false && side !== nil) {
              return self.statTest.$drawAreaSide(side, ((function() {if (i['$=='](0)) {
                return "left"
                } else {
                return "right"
              }; return nil; })()), self.shapes['$[]'](i), style = self.style, graph = self.graph)
              } else {
              return self.shapes['$[]'](i).graphics.c();
            }}, TMP_24._s = self, TMP_24), $a).call($b)
        };
      };

      def.$attachShapes = function() {
        var self = this;
        self.plot.$addChild(self.shapes['$[]'](0), [self, "draw"]);
        return self.plot.$addChild(self.shapes['$[]'](1), [self, "draw"]);
      };

      return (def.$tooltipContent = function(shape, evt) {
        var $a, $b, $c, self = this, alpha = nil, $case = nil, statTestQuantile = nil, area = nil, param = nil, side = nil;
        alpha = (function() {$case = self.alpha;if ("context"['$===']($case)) {return self.context['$[]']("alpha")}else if ("paramH0"['$===']($case)) {statTestQuantile = self.context['$[]']("paramEstH0");
        return self.context['$[]']("alpha");}else if ("deltaH0"['$===']($case)) {statTestQuantile = self.context['$[]']("deltaEstH0");
        return self.context['$[]']("alpha");}else if ("paramEstLim"['$===']($case)) {statTestQuantile = self.context['$[]']("paramEstH0");
        return self.context['$[]']("paramPval");}else if ("deltaEstLim"['$===']($case)) {statTestQuantile = self.context['$[]']("deltaEstH0");
        return self.context['$[]']("deltaPval");}else {return self.alpha}})();
        area = alpha;
        if (($a = (($b = statTestQuantile !== false && statTestQuantile !== nil) ? ($c = self.statTest['$=='](statTestQuantile), ($c === nil || $c === false)) : $b)) !== false && $a !== nil) {
          param = (function() {$case = self.statTest.$typeStatTest();if ("dp0"['$===']($case) || "dm0"['$===']($case) || "dp1"['$===']($case) || "dm1"['$===']($case)) {return self.statTest.$paramsFrame()['$[]'](0).$paramsFrame()['$[]'](1)}else {return self.statTest.$paramsFrame()['$[]'](1)}})();
          side = (function() {if (self.side['$==']("context")) {
            return self.context['$[]']("side")
            } else {
            return self.side
          }; return nil; })();
          area = (function() {$case = side;if (">"['$===']($case)) {if (param['$>'](self.context['$[]']("ref"))) {
            return self.statTest.$distrib().$cdf(statTestQuantile.$distrib().$quantile((1)['$-'](alpha)))
            } else {
            return (1)['$-'](self.statTest.$distrib().$cdf(statTestQuantile.$distrib().$quantile((1)['$-'](alpha))))
          }}else if ("<"['$===']($case)) {if (param['$<'](self.context['$[]']("ref"))) {
            return (1)['$-'](self.statTest.$distrib().$cdf(statTestQuantile.$distrib().$quantile(alpha)))
            } else {
            return self.statTest.$distrib().$cdf(statTestQuantile.$distrib().$quantile(alpha))
          }}else if ("!="['$===']($case)) {if ((Math.abs(param['$-'](self.context['$[]']("ref"))))['$<'](0.0001)) {
            return (2)['$*'](self.statTest.$distrib().$cdf(statTestQuantile.$distrib().$quantile(alpha['$/'](2.0))))
            } else {
            return self.statTest.$distrib().$cdf(statTestQuantile.$distrib().$quantile((1)['$-'](alpha['$/'](2.0))))['$-'](self.statTest.$distrib().$cdf(statTestQuantile.$distrib().$quantile(alpha['$/'](2.0))))
          }}else { return nil }})();};
        return (area['$*'](100)).$to_s()['$+']("%");
      }, nil);
    })(self, $scope.Child);

    (function($base, $super) {
      function $Play(){};
      var self = $Play = $klass($base, $super, 'Play', $Play);

      var def = $Play._proto, $scope = $Play._scope;
      def.plotParam = def.plotDelta = def.paramEst = def.deltaEst = def.context = def.paramLim = def.deltaLim = def.paramTypeIRisk = def.deltaTypeIRisk = def.paramTypeGenRisk = def.deltaTypeGenRisk = def.paramEstLim = def.deltaEstLim = def.paramPvalRisk = def.deltaPvalRisk = def.styles = def.alpha = def.graphParam = def.graphDelta = nil;
      self.$attr_accessor("exp");

      def.$initialize = function(plotParam, plotDelta) {
        var $a, self = this;
        if (plotParam == null) {
          plotParam = cqls.s.plot
        }
        if (plotDelta == null) {
          plotDelta = cqls.h.plot
        }
        self.stage = cqls.m.stage;
        $a = [plotParam, plotDelta], self.plotParam = $a[0], self.plotDelta = $a[1];
        $a = [self.plotParam.$graph(), self.plotDelta.$graph()], self.graphParam = $a[0], self.graphDelta = $a[1];
        self.$setStyles();
        self.paramEst = [$scope.StatTestCurve.$new("p", [1000, 0.15], false), $scope.StatTestCurve.$new("p", [1000, 0.2])];
        self.plotParam.$addChild(self.paramEst['$[]'](0));
        self.plotParam.$addChild(self.paramEst['$[]'](1));
        self.paramEst['$[]'](1).$style()['$[]=']("fill", createjs.Graphics.getRGB(200,200,200,.3));
        self.paramEst['$[]'](1).$style()['$[]=']("thickness", 1);
        self.deltaEst = [$scope.StatTestCurve.$new("dp0", [self.paramEst['$[]'](0)], false), $scope.StatTestCurve.$new("dp1", [self.paramEst['$[]'](1), 0.15], false)];
        self.plotDelta.$addChild(self.deltaEst['$[]'](0));
        self.plotDelta.$addChild(self.deltaEst['$[]'](1));
        self.deltaEst['$[]'](1).$style()['$[]=']("fill", createjs.Graphics.getRGB(200,200,200,.3));
        self.deltaEst['$[]'](1).$style()['$[]=']("thickness", 1);
        self.context = $hash2([], {});
        self.paramLim = $scope.AcceptanceRegion.$new(self.paramEst['$[]'](0), self.context);
        self.deltaLim = $scope.AcceptanceRegion.$new(self.deltaEst['$[]'](0), self.context);
        self.paramLim.$setPlot(self.plotParam);
        self.deltaLim.$setPlot(self.plotDelta);
        self.paramTypeIRisk = $scope.AreaRisk.$new(self.paramEst['$[]'](0), self.context);
        self.deltaTypeIRisk = $scope.AreaRisk.$new(self.deltaEst['$[]'](0), self.context);
        self.paramTypeIRisk.$setPlot(self.plotParam);
        self.deltaTypeIRisk.$setPlot(self.plotDelta);
        self.paramTypeGenRisk = $scope.AreaRisk.$new(self.paramEst['$[]'](1), self.context);
        self.paramTypeGenRisk['$alpha=']("paramH0");
        self.paramTypeGenRisk.$setPlot(self.plotParam);
        self.deltaTypeGenRisk = $scope.AreaRisk.$new(self.deltaEst['$[]'](1), self.context);
        self.deltaTypeGenRisk['$alpha=']("deltaH0");
        self.deltaTypeGenRisk.$setPlot(self.plotDelta);
        self.paramEstLim = $scope.AcceptanceRegion.$new(self.paramEst['$[]'](0), self.context);
        self.paramEstLim['$alpha=']("paramPval");
        self.deltaEstLim = $scope.AcceptanceRegion.$new(self.deltaEst['$[]'](0), self.context);
        self.deltaEstLim['$alpha=']("deltaPval");
        self.paramEstLim.$setPlot(self.plotParam);
        self.deltaEstLim.$setPlot(self.plotDelta);
        self.paramPvalRisk = $scope.AreaRisk.$new(self.paramEst['$[]'](0), self.context);
        self.paramPvalRisk['$alpha=']("paramEstLim");
        self.deltaPvalRisk = $scope.AreaRisk.$new(self.deltaEst['$[]'](0), self.context);
        self.deltaPvalRisk['$alpha=']("deltaEstLim");
        self.paramPvalRisk.$setPlot(self.plotParam);
        self.deltaPvalRisk.$setPlot(self.plotDelta);
        self.paramLim['$style='](self.deltaLim['$style='](self.styles['$[]']("lim")));
        self.paramEstLim['$style='](self.deltaEstLim['$style='](self.styles['$[]']("estLim")));
        self.paramPvalRisk['$style='](self.deltaPvalRisk['$style='](self.styles['$[]']("estLim")));
        self.paramLim.$initEvents();
        self.paramLim.$addCallable([self.paramTypeIRisk, "draw"]);
        self.paramLim.$addCallable([self.paramTypeGenRisk, "draw"]);
        self.paramLim.$addCallable([self.deltaLim, "draw"]);
        self.paramLim.$addCallable([self.deltaTypeIRisk, "draw"]);
        self.paramLim.$addCallable([self.deltaTypeGenRisk, "draw"]);
        self.deltaLim.$initEvents();
        self.deltaLim.$addCallable([self.deltaTypeIRisk, "draw"]);
        self.deltaLim.$addCallable([self.deltaTypeGenRisk, "draw"]);
        self.deltaLim.$addCallable([self.paramLim, "draw"]);
        self.deltaLim.$addCallable([self.paramTypeIRisk, "draw"]);
        self.deltaLim.$addCallable([self.paramTypeGenRisk, "draw"]);
        self.paramEst['$[]'](0).$initEvents(["sd"]);
        self.paramEst['$[]'](0).$addCallable([self.paramEst['$[]'](1), "paramsFrameAtFrom", [2, self.paramEst['$[]'](0)]], "sd");
        self.paramEst['$[]'](0).$addCallable([self.paramEst['$[]'](1), "updateStatTestDistrib"], "sd");
        self.paramEst['$[]'](0).$addCallable([self.paramEst['$[]'](1), "draw"], "sd");
        self.paramEst['$[]'](0).$addCallable([self.paramEst['$[]'](1), "drawSD"], "sd");
        self.paramEst['$[]'](0).$addCallable([self.paramLim, "draw"], "sd");
        self.paramEst['$[]'](0).$addCallable([self.paramTypeIRisk, "draw"], "sd");
        self.paramEst['$[]'](0).$addCallable([self.paramTypeGenRisk, "draw"], "sd");
        self.paramEst['$[]'](0).$addCallable([self.deltaEst['$[]'](1), "updateStatTestDistrib"], "sd");
        self.paramEst['$[]'](0).$addCallable([self.deltaEst['$[]'](1), "draw"], "sd");
        self.paramEst['$[]'](0).$addCallable([self.deltaEst['$[]'](1), "drawMean"], "sd");
        self.paramEst['$[]'](0).$addCallable([self.deltaEst['$[]'](1), "drawSD"], "sd");
        self.paramEst['$[]'](0).$addCallable([self.deltaTypeGenRisk, "draw"], "sd");
        self.paramEst['$[]'](0).$addCallable([self, "setPval"], "sd");
        self.paramEst['$[]'](0).$addCallable([self.paramPvalRisk, "draw"], "sd");
        self.paramEst['$[]'](1).$initEvents();
        self.paramEst['$[]'](1).$addCallable([self.paramTypeGenRisk, "draw"]);
        self.paramEst['$[]'](1).$addCallable([self.deltaEst['$[]'](1), "updateStatTestDistrib"]);
        self.paramEst['$[]'](1).$addCallable([self.deltaEst['$[]'](1), "draw"]);
        self.paramEst['$[]'](1).$addCallable([self.deltaEst['$[]'](1), "drawMean"]);
        self.paramEst['$[]'](1).$addCallable([self.deltaEst['$[]'](1), "drawSD"]);
        self.paramEst['$[]'](1).$addCallable([self.deltaTypeGenRisk, "draw"]);
        self.paramEst['$[]'](1).$addCallable([self.paramEst['$[]'](0), "paramsFrameAtFrom", [2, self.paramEst['$[]'](1)]], "sd");
        self.paramEst['$[]'](1).$addCallable([self.paramEst['$[]'](0), "updateStatTestDistrib"], "sd");
        self.paramEst['$[]'](1).$addCallable([self.paramEst['$[]'](0), "draw"], "sd");
        self.paramEst['$[]'](1).$addCallable([self.paramEst['$[]'](0), "drawSD"], "sd");
        self.paramEst['$[]'](1).$addCallable([self.paramLim, "draw"], "sd");
        self.paramEst['$[]'](1).$addCallable([self.paramTypeIRisk, "draw"], "sd");
        self.paramEst['$[]'](1).$addCallable([self.paramTypeGenRisk, "draw"], "sd");
        self.paramEst['$[]'](1).$addCallable([self.deltaEst['$[]'](1), "updateStatTestDistrib"], "sd");
        self.paramEst['$[]'](1).$addCallable([self.deltaEst['$[]'](1), "draw"], "sd");
        self.paramEst['$[]'](1).$addCallable([self.deltaEst['$[]'](1), "drawMean"], "sd");
        self.paramEst['$[]'](1).$addCallable([self.deltaEst['$[]'](1), "drawSD"], "sd");
        self.paramEst['$[]'](1).$addCallable([self.deltaTypeGenRisk, "draw"], "sd");
        self.paramEst['$[]'](1).$addCallable([self, "setPval"], "sd");
        self.paramEst['$[]'](1).$addCallable([self.paramPvalRisk, "draw"], "sd");
        self.paramLim.$attachShapes();
        self.deltaLim.$attachShapes();
        self.paramTypeIRisk.$attachShapes();
        self.deltaTypeIRisk.$attachShapes();
        self.paramTypeGenRisk.$attachShapes();
        self.deltaTypeGenRisk.$attachShapes();
        self.paramEstLim.$attachShapes();
        self.deltaEstLim.$attachShapes();
        self.paramPvalRisk.$attachShapes();
        self.deltaPvalRisk.$attachShapes();
        self.paramEst['$[]'](0).$attachShapes();
        self.paramEst['$[]'](1).$attachShapes();
        self.deltaEst['$[]'](0).$attachShapes();
        self.deltaEst['$[]'](1).$attachShapes();
        self.plotParam.$attachAxis();
        self.plotDelta.$attachAxis();
        self.n01 = $scope.Distribution.$new("normal", [0, 1]);
        self.$setAlpha(0.05);
        self.$setStatMode("none");
        self.$reset();
        return self.style = $hash2(["fp", "sp", "fl", "sl", "fr", "sr"], {"fp": "#FFF", "sp": "#000000", "fl": "#FFF", "sl": "#000000", "fr": "rgba(100,100,255,0.8)", "sr": "#000000"});
      };

      def.$setStyles = function() {
        var $a, self = this;
        if (($a = self.styles) === false || $a === nil) {
          self.styles = $hash2([], {})};
        self.styles['$[]=']("estLim", $hash2(["fill", "stroke", "thickness"], {"fill": "rgba(240,130,40,.3)", "stroke": "rgba(240,130,40,.8)", "thickness": 6}));
        self.styles['$[]=']("known", $hash2(["close", "fill", "stroke", "thickness"], {"close": true, "fill": "rgba(50,100,250,.1)", "stroke": "rgba(50,150,250,.8)", "thickness": 3}));
        self.styles['$[]=']("knownMovable", $hash2(["close", "fill", "stroke", "thickness"], {"close": true, "fill": "rgba(50,100,250,.1)", "stroke": "rgba(50,150,250,.8)", "thickness": 6}));
        self.styles['$[]=']("unknown", $hash2(["close", "fill", "stroke", "thickness"], {"close": true, "fill": "rgba(250,50,100,.1)", "stroke": "rgba(250,50,100,.8)", "thickness": 3}));
        self.styles['$[]=']("unknownMovable", $hash2(["close", "fill", "stroke", "thickness"], {"close": true, "fill": "rgba(250,50,100,.1)", "stroke": "rgba(250,50,100,.8)", "thickness": 6}));
        return self.styles['$[]=']("lim", $hash2(["close", "fill", "stroke", "thickness"], {"close": true, "fill": "rgba(20,150,20,.1)", "stroke": "rgba(20,150,20,.8)", "thickness": 6}));
      };

      def.$setPval = function() {
        var self = this;
        self.context['$[]=']("paramPval", self.context['$[]']("paramEstH0").$distrib().$cdf(self.context['$[]']("paramEstLim")));
        self.context['$[]=']("deltaPval", self.context['$[]']("deltaEstH0").$distrib().$cdf(self.context['$[]']("deltaEstLim")));
        if (self.context['$[]']("side")['$=='](">")) {
          self.context['$[]=']("paramPval", (1)['$-'](self.context['$[]']("paramPval")));
          return self.context['$[]=']("deltaPval", (1)['$-'](self.context['$[]']("deltaPval")));
        } else if (self.context['$[]']("side")['$==']("!=")) {
          self.context['$[]=']("paramPval", (2)['$*']([self.context['$[]']("paramPval"), (1)['$-'](self.context['$[]']("paramPval"))].$min()));
          return self.context['$[]=']("deltaPval", (2)['$*']([self.context['$[]']("deltaPval"), (1)['$-'](self.context['$[]']("deltaPval"))].$min()));
          } else {
          return nil
        };
      };

      def.$getContext = function() {
        var self = this, $case = nil, sd = nil;
        self.context['$[]=']("param", cqls.enyo.app.$.paramMenuName.getContent());
        self.context['$[]=']("side", cqls.enyo.app.$.sideMenuName.getContent());
        self.context['$[]=']("ref", parseFloat(cqls.enyo.app.$.refValue.getValue()));
        self.context['$[]=']("n", parseInt(cqls.enyo.app.$.nValue.getValue()));
        self.context['$[]=']("alpha", self.alpha);
        self.context['$[]=']("sigma", 1);
        $case = self.context['$[]']("param");if ("p"['$===']($case)) {self.paramEst['$[]'](0)['$paramsFrame=']([self.context['$[]']("n"), self.context['$[]']("ref")]);
        self.paramEst['$[]'](1)['$paramsFrame=']([self.context['$[]']("n"), self.context['$[]']("ref").$to_f()['$*'](((function() {if (self.context['$[]']("side")['$==']("<")) {
          return 0.5
          } else {
          return 1.5
        }; return nil; })()))]);
        self.context['$[]=']("paramEstLim", parseFloat(cqls.enyo.app.$.meanValue.getValue()));
        self.context['$[]=']("deltaEstLim", (self.context['$[]']("paramEstLim")['$-'](self.context['$[]']("ref")))['$/']((Math.sqrt(self.context['$[]']("ref")['$*'](((1)['$-'](self.context['$[]']("ref"))))['$/'](self.context['$[]']("n"))))));}else if ("mu"['$===']($case)) {self.context['$[]=']("param", "m");
        self.paramEst['$[]'](0)['$paramsFrame=']([self.context['$[]']("n"), self.context['$[]']("ref"), self.context['$[]']("sigma")]);
        self.paramEst['$[]'](1)['$paramsFrame=']([self.context['$[]']("n"), self.context['$[]']("ref").$to_f()['$*'](((function() {if (self.context['$[]']("side")['$==']("<")) {
          return 0.5
          } else {
          return 1.5
        }; return nil; })())), self.context['$[]']("sigma")]);
        self.context['$[]=']("paramEstLim", parseFloat(cqls.enyo.app.$.meanValue.getValue()));
        sd = parseFloat(cqls.enyo.app.$.sdValue.getValue());
        self.context['$[]=']("deltaEstLim", (self.context['$[]']("paramEstLim")['$-'](self.context['$[]']("ref")))['$/']((sd['$/'](Math.sqrt(self.context['$[]']("n"))))));};
        self.paramEst['$[]'](0)['$typeStatTest='](self.context['$[]']("param"));
        self.paramEst['$[]'](1)['$typeStatTest='](self.context['$[]']("param"));
        self.context['$[]=']("paramEstH0", self.paramEst['$[]'](0));
        self.context['$[]=']("deltaEstH0", self.deltaEst['$[]'](0));
        self.deltaEst['$[]'](0)['$typeStatTest=']("d"['$+'](self.context['$[]']("param"))['$+']("0"));
        self.deltaEst['$[]'](1)['$typeStatTest=']("d"['$+'](self.context['$[]']("param"))['$+']("1"));
        self.paramEst['$[]'](1).$updateStatTestDistrib();
        self.paramEst['$[]'](0).$updateStatTestDistrib();
        self.deltaEst['$[]'](1).$updateStatTestDistrib();
        self.$setPval();
        return (function() {$case = self.context['$[]']("param");if ("p"['$===']($case)) {self.paramEst['$[]'](0)['$style='](self.styles['$[]']("known"));
        self.paramEst['$[]'](0)['$meanStyle='](self.styles['$[]']("known"));
        self.paramEst['$[]'](0)['$sdStyle='](self.styles['$[]']("known"));
        self.paramEst['$[]'](1)['$style='](self.styles['$[]']("unknown"));
        self.paramEst['$[]'](1)['$meanStyle='](self.styles['$[]']("unknownMovable"));
        self.paramEst['$[]'](1)['$sdStyle='](self.styles['$[]']("unknownMovable"));
        self.deltaEst['$[]'](0)['$style='](self.styles['$[]']("known"));
        self.deltaEst['$[]'](0)['$meanStyle='](self.styles['$[]']("known"));
        self.deltaEst['$[]'](0)['$sdStyle='](self.styles['$[]']("known"));
        self.deltaEst['$[]'](1)['$style='](self.styles['$[]']("unknown"));
        self.deltaEst['$[]'](1)['$meanStyle='](self.styles['$[]']("unknown"));
        return self.deltaEst['$[]'](1)['$sdStyle='](self.styles['$[]']("unknown"));}else if ("m"['$===']($case)) {self.paramEst['$[]'](0)['$style='](self.styles['$[]']("unknown"));
        self.paramEst['$[]'](0)['$meanStyle='](self.styles['$[]']("known"));
        self.paramEst['$[]'](0)['$sdStyle='](self.styles['$[]']("unknownMovable"));
        self.paramEst['$[]'](1)['$style='](self.styles['$[]']("unknown"));
        self.paramEst['$[]'](1)['$meanStyle='](self.styles['$[]']("unknownMovable"));
        self.paramEst['$[]'](1)['$sdStyle='](self.styles['$[]']("unknownMovable"));
        self.deltaEst['$[]'](0)['$style='](self.styles['$[]']("known"));
        self.deltaEst['$[]'](0)['$meanStyle='](self.styles['$[]']("known"));
        self.deltaEst['$[]'](0)['$sdStyle='](self.styles['$[]']("known"));
        self.deltaEst['$[]'](1)['$style='](self.styles['$[]']("unknown"));
        self.deltaEst['$[]'](1)['$meanStyle='](self.styles['$[]']("unknown"));
        return self.deltaEst['$[]'](1)['$sdStyle='](self.styles['$[]']("unknown"));}else { return nil }})();
      };

      def.$reset = function(curs) {
        var $a, $b, TMP_25, self = this;
        if (curs == null) {
          curs = [0, 1]
        }
        self.$getContext();
        self.graphParam['$active='](["curve0", "curve1"]);
        self.graphParam.$update();
        self.plotParam.$update();
        self.graphDelta['$active='](["curve2", "curve3"]);
        self.graphDelta.$update();
        self.plotDelta.$update();
        ($a = ($b = curs).$each, $a._p = (TMP_25 = function(cur){var self = TMP_25._s || this;
          if (self.paramEst == null) self.paramEst = nil;
          if (self.deltaEst == null) self.deltaEst = nil;
if (cur == null) cur = nil;
        self.paramEst['$[]'](cur).$draw();
          return self.deltaEst['$[]'](cur).$draw();}, TMP_25._s = self, TMP_25), $a).call($b);
        return self.$updateVisible();
      };

      def.$setStatMode = function(mode) {
        var self = this;
        return self.statMode = ((function() {if (mode['$==']("meanIC")) {
          return "ic"
          } else {
          return "none"
        }; return nil; })());
      };

      def.$setAlpha = function(alpha) {
        var self = this;
        return self.alpha = alpha;
      };

      return (def.$updateVisible = function() {
        var self = this;
        
				self.paramEst['$[]'](0).shape.visible=cqls.enyo.app.$.checkParam0Curve.getValue();
				self.paramEst['$[]'](1).shape.visible=cqls.enyo.app.$.checkParam1Curve.getValue();
				self.deltaEst['$[]'](0).shape.visible=cqls.enyo.app.$.checkDelta0Curve.getValue();
				self.deltaEst['$[]'](1).shape.visible=cqls.enyo.app.$.checkDelta1Curve.getValue();
			 	

				// Lim
				self.paramLim.shapes[0].visible= cqls.enyo.app.$.checkParamLim.getValue();
				self.paramLim.shapes[1].visible= cqls.enyo.app.$.checkParamLim.getValue();
				self.deltaLim.shapes[0].visible= cqls.enyo.app.$.checkDeltaLim.getValue();
				self.deltaLim.shapes[1].visible= cqls.enyo.app.$.checkDeltaLim.getValue();
				self.paramEstLim.shapes[0].visible= cqls.enyo.app.$.checkData.getValue();
				self.paramEstLim.shapes[1].visible= cqls.enyo.app.$.checkData.getValue();
				self.deltaEstLim.shapes[0].visible= cqls.enyo.app.$.checkData.getValue();
				self.deltaEstLim.shapes[1].visible= cqls.enyo.app.$.checkData.getValue();

				//Risk
				self.paramTypeIRisk.shapes[0].visible= cqls.enyo.app.$.checkRiskTypeI.getValue() & cqls.enyo.app.$.checkParam0Curve.getValue();
				self.paramTypeIRisk.shapes[1].visible= cqls.enyo.app.$.checkRiskTypeI.getValue() & cqls.enyo.app.$.checkParam0Curve.getValue();
				self.deltaTypeIRisk.shapes[0].visible= cqls.enyo.app.$.checkRiskTypeI.getValue() & cqls.enyo.app.$.checkDelta0Curve.getValue();
				self.deltaTypeIRisk.shapes[1].visible= cqls.enyo.app.$.checkRiskTypeI.getValue() & cqls.enyo.app.$.checkDelta0Curve.getValue();

				self.paramTypeGenRisk.shapes[0].visible= cqls.enyo.app.$.checkRiskTypeGen.getValue() & cqls.enyo.app.$.checkParam1Curve.getValue();
				self.paramTypeGenRisk.shapes[1].visible= cqls.enyo.app.$.checkRiskTypeGen.getValue() & cqls.enyo.app.$.checkParam1Curve.getValue();
				self.deltaTypeGenRisk.shapes[0].visible= cqls.enyo.app.$.checkRiskTypeGen.getValue() & cqls.enyo.app.$.checkDelta1Curve.getValue();
				self.deltaTypeGenRisk.shapes[1].visible= cqls.enyo.app.$.checkRiskTypeGen.getValue() & cqls.enyo.app.$.checkDelta1Curve.getValue();

				self.paramPvalRisk.shapes[0].visible= cqls.enyo.app.$.checkPval.getValue() & cqls.enyo.app.$.checkParam0Curve.getValue();
				self.paramPvalRisk.shapes[1].visible= cqls.enyo.app.$.checkPval.getValue() & cqls.enyo.app.$.checkParam0Curve.getValue();
				self.deltaPvalRisk.shapes[0].visible= cqls.enyo.app.$.checkPval.getValue() & cqls.enyo.app.$.checkDelta0Curve.getValue();
				self.deltaPvalRisk.shapes[1].visible= cqls.enyo.app.$.checkPval.getValue() & cqls.enyo.app.$.checkDelta0Curve.getValue();


				self.paramEst['$[]'](0).summaryShapes[0].visible=cqls.enyo.app.$.checkParam0Mean.getValue();
				self.paramEst['$[]'](0).summaryShapes[1].visible=cqls.enyo.app.$.checkParam0SD.getValue();
				self.paramEst['$[]'](1).summaryShapes[0].visible=cqls.enyo.app.$.checkParam1Mean.getValue();
				self.paramEst['$[]'](1).summaryShapes[1].visible=cqls.enyo.app.$.checkParam1SD.getValue();
				
				self.deltaEst['$[]'](0).summaryShapes[0].visible=cqls.enyo.app.$.checkDelta0Mean.getValue();
				self.deltaEst['$[]'](0).summaryShapes[1].visible=cqls.enyo.app.$.checkDelta0SD.getValue();
				self.deltaEst['$[]'](1).summaryShapes[0].visible=cqls.enyo.app.$.checkDelta1Mean.getValue();
				self.deltaEst['$[]'](1).summaryShapes[1].visible=cqls.enyo.app.$.checkDelta1SD.getValue();
				
				// update stage since possible change of visibility
				cqls.m.stage.update();
			;
      }, nil);
    })(self, null);

    (function($base, $super) {
      function $Distribution(){};
      var self = $Distribution = $klass($base, $super, 'Distribution', $Distribution);

      var def = $Distribution._proto, $scope = $Distribution._scope;
      def.list = def.name = def.params = def.originalDistrib = def.type = def.distrib = nil;
      self.$attr_accessor("list", "name", "params", "distrib");

      def.$initialize = function(name, params, transf) {
        var $a, $b, self = this;
        if (name == null) {
          name = nil
        }
        if (params == null) {
          params = []
        }
        if (transf == null) {
          transf = nil
        }
        if (($a = (($b = $opal.cvars['@@list']) == null ? nil : $b)) === false || $a === nil) {
          ($opal.cvars['@@list'] = $hash2(["uniform", "normal", "t", "chi2", "exp", "cauchy", "discreteUniform", "bernoulli", "binomial", "birthday", "mean", "sum", "locationScale", "square", "sumOfSq"], {"uniform": $hash2(["type", "dist", "qbounds"], {"type": "cont", "dist": ["UniformDistribution"], "qbounds": [0, 1]}), "normal": $hash2(["type", "dist", "qbounds"], {"type": "cont", "dist": ["NormalDistribution"], "qbounds": [cqls.m.qmin, cqls.m.qmax]}), "t": $hash2(["type", "dist", "qbounds"], {"type": "cont", "dist": ["StudentDistribution"], "qbounds": [cqls.m.qmin, cqls.m.qmax]}), "chi2": $hash2(["type", "dist", "qbounds"], {"type": "cont", "dist": ["ChiSquareDistribution"], "qbounds": [0, cqls.m.qmax]}), "exp": $hash2(["type", "dist", "qbounds"], {"type": "cont", "dist": ["ExponentialDistribution"], "qbounds": [0, cqls.m.qmax]}), "cauchy": $hash2(["type", "dist", "qbounds"], {"type": "cont", "dist": ["CauchyDistribution"], "qbounds": [0.01, 0.99]}), "discreteUniform": $hash2(["type", "dist", "qbounds"], {"type": "disc", "dist": ["DiscreteUniformDistribution"], "qbounds": [0, 1]}), "bernoulli": $hash2(["type", "dist", "qbounds"], {"type": "disc", "dist": ["BernoulliDistribution"], "qbounds": [0, 1]}), "binomial": $hash2(["type", "dist", "qbounds"], {"type": "disc", "dist": ["BinomialDistribution"], "qbounds": [0, 1]}), "birthday": $hash2(["type", "dist", "qbounds"], {"type": "disc", "dist": ["BirthdayDistribution"], "qbounds": [0.01, 1]}), "mean": $hash2(["dist", "qbounds"], {"dist": "none", "qbounds": [0, 1]}), "sum": $hash2(["dist", "qbounds"], {"dist": "none", "qbounds": [0, 1]}), "locationScale": $hash2(["dist", "qbounds"], {"dist": "none", "qbounds": [0, 1]}), "square": $hash2(["dist", "qbounds"], {"dist": "none", "qbounds": [0, 1]}), "sumOfSq": $hash2(["dist", "qbounds"], {"dist": "none", "qbounds": [0, 1]})}))};
        self.list = (($a = $opal.cvars['@@list']) == null ? nil : $a);
        if (name !== false && name !== nil) {
          if (transf !== false && transf !== nil) {
            return self.$setAsTransfOf($scope.Distribution.$new(name, params), transf)
            } else {
            return self.$set(name, params)
          }
          } else {
          return nil
        };
      };

      def.$set = function(dist, params) {
        var $a, self = this, instr = nil;
        $a = [dist, params], self.name = $a[0], self.params = $a[1];
        self.type = self.list['$[]'](self.name)['$[]']("type");
        instr = "new "['$+'](self.list['$[]'](self.name)['$[]']("dist").$join("."))['$+']("(")['$+'](self.params.$join(","))['$+'](");");
        return self.distrib = eval(instr);
      };

      def.$setAsTransfOf = function(dist, transf) {
        var $a, $b, TMP_26, self = this, $case = nil, d = nil;
        $a = [transf['$[]']("name"), transf['$[]']("args")], self.name = $a[0], self.params = $a[1];
        self.originalDistrib = dist;
        return (function() {$case = self.name;if ("square"['$===']($case)) {return self.distrib = new PowerDistribution(self.originalDistrib.distrib,2)}else if ("mean"['$===']($case)) {d = new Convolution(self.originalDistrib.distrib,self.params['$[]'](0));
        return self.distrib = new LocationScaleDistribution(d,0,1/self.params['$[]'](0));}else if ("sum"['$===']($case)) {return self.distrib = new Convolution(self.originalDistrib.distrib,self.params['$[]'](0))}else if ("locationScale"['$===']($case)) {return self.distrib = new LocationScaleDistribution(self.originalDistrib.distrib,self.params['$[]'](0),self.params['$[]'](1))}else if ("sumOfSq"['$===']($case)) {d = new LocationScaleDistribution(self.originalDistrib.distrib,-self.originalDistrib.$mean()/self.originalDistrib.$stdDev(),1/self.originalDistrib.$stdDev());
        d = new PowerDistribution(d,2);
        if (($a = d.type === CONT) !== false && $a !== nil) {
          return self.distrib = new Convolution(d,self.params['$[]'](0))
          } else {
          self.distrib = $scope.Convolution.$power(d, self.params['$[]'](0));
          return self.$p(["boundsDistrib", self.$step(), self.$bounds(), self.$pdf(self.$bounds()), ($a = ($b = self.$pdf(self.$bounds())).$inject, $a._p = (TMP_26 = function(e, e2){var self = TMP_26._s || this;if (e == null) e = nil;if (e2 == null) e2 = nil;
          return e = e['$+'](e2)}, TMP_26._s = self, TMP_26), $a).call($b, 0)]);
        };}else { return nil }})();
      };

      def.$type = function() {
        var $a, self = this;
        return ((($a = self.type) !== false && $a !== nil) ? $a : self.originalDistrib.$type());
      };

      def.$qbounds = function() {
        var self = this;
        return self.list['$[]'](self.name)['$[]']("qbounds");
      };

      def.$bounds = function() {
        var $a, $b, TMP_27, $c, $d, TMP_28, TMP_29, self = this, qb = nil, $case = nil, a = nil, b = nil, s = nil;
        qb = (function() {if (($a = self.originalDistrib) !== false && $a !== nil) {
          return self.originalDistrib.$qbounds()
          } else {
          return self.$qbounds()
        }; return nil; })();
        return (function() {$case = self.$type();if ("cont"['$===']($case)) {return ($a = ($b = qb).$map, $a._p = (TMP_27 = function(e){var self = TMP_27._s || this;if (e == null) e = nil;
        return self.$quantile(e)}, TMP_27._s = self, TMP_27), $a).call($b)}else if ("disc"['$===']($case)) {if (($a = self['$regular?']()) !== false && $a !== nil) {
          $a = $opal.to_ary(($c = ($d = qb).$map, $c._p = (TMP_28 = function(e){var self = TMP_28._s || this;if (e == null) e = nil;
          return self.$quantile(e)}, TMP_28._s = self, TMP_28), $c).call($d)), a = ($a[0] == null ? nil : $a[0]), b = ($a[1] == null ? nil : $a[1]);
          s = self.$step();
          return ($a = ($c = $scope.Range.$new(0, ((b['$-'](a))['$/'](s))).$to_a()).$map, $a._p = (TMP_29 = function(e){var self = TMP_29._s || this;if (e == null) e = nil;
          return a['$+'](e['$*'](s))}, TMP_29._s = self, TMP_29), $a).call($c);
          } else {
          return self.distrib.values();
        }}else { return nil }})();
      };

      def.$minValue = function() {
        var self = this;
        return self.distrib.minValue();
      };

      def.$maxValue = function() {
        var self = this;
        return self.distrib.maxValue();
      };

      def['$regular?'] = function() {
        var self = this;
        return self.distrib.regular();
      };

      def.$step = function() {
        var $a, $b, TMP_30, self = this, b = nil;
        if (($a = self['$regular?']()) !== false && $a !== nil) {
          return self.distrib.step();
          } else {
          b = self.$bounds();
          return ($a = ($b = ($range(1, b.$length(), true))).$map, $a._p = (TMP_30 = function(i){var self = TMP_30._s || this;if (i == null) i = nil;
          return (b['$[]'](i)['$-'](b['$[]'](i['$-'](1)))).$abs()}, TMP_30._s = self, TMP_30), $a).call($b).$min().$to_f();
        };
      };

      def.$mean = function() {
        var self = this;
        return self.distrib.mean();
      };

      def.$mode = function() {
        var self = this;
        return self.distrib.mode();
      };

      def.$maxPdf = function() {
        var self = this;
        return self.distrib.maxDensity();
      };

      def.$variance = function() {
        var self = this;
        return self.distrib.variance();
      };

      def.$stdDev = function() {
        var self = this;
        return self.distrib.stdDev();
      };

      def.$sample = function(n) {
        var self = this;
        if (n == null) {
          n = 1
        }
        z=[];for(i=0;i<n;i++) z[i]=self.distrib.simulate();return z
      };

      def.$pdf = function(x) {
        var self = this;
        return x.map(function(e) {return self.distrib.density(e);});
      };

      def.$cdf = function(x) {
        var self = this;
        return self.distrib.CDF(x);
      };

      return (def.$quantile = function(alpha) {
        var self = this;
        return self.distrib.quantile(alpha);
      }, nil);
    })(self, null);

    (function($base, $super) {
      function $Convolution(){};
      var self = $Convolution = $klass($base, $super, 'Convolution', $Convolution);

      var def = $Convolution._proto, $scope = $Convolution._scope;
      def.b1 = def.bounds = nil;
      $opal.defs($scope.Convolution, '$power', function(d, n) {
        var $a, $b, TMP_31, self = this, dist = nil, b = nil, dist2 = nil, b2 = nil;
        if (($a = d instanceof Distribution) !== false && $a !== nil) {
          $a = [d, d.values()], dist = $a[0], b = $a[1];
          $a = [d, d.values()], dist2 = $a[0], b2 = $a[1];
          } else {
          $a = [d.$distrib(), d.$bounds()], dist = $a[0], b = $a[1];
          $a = [d.$distrib(), d.$bounds()], dist2 = $a[0], b2 = $a[1];
        };
        ($a = ($b = ($range(1, n, true))).$each, $a._p = (TMP_31 = function(i){var self = TMP_31._s || this;if (i == null) i = nil;
        dist2 = new Convolution2(dist,dist2,b,b2);
          return b2 = dist2.values();}, TMP_31._s = self, TMP_31), $a).call($b);
        return dist2;
      });

      $opal.defs($scope.Convolution, '$two', function(d, d2) {
        var $a, self = this, dist = nil, b = nil, dist2 = nil, b2 = nil;
        $a = [d.$distrib(), d.$bounds()], dist = $a[0], b = $a[1];
        $a = [d2.$distrib(), d2.$bounds()], dist2 = $a[0], b2 = $a[1];
        return new Convolution2(dist,dist2,b,b2);
      });

      def.$initialize = function(d1, d2, b1, b2) {
        var $a, self = this;
        $a = [d1, d2, b1, b2], self.d1 = $a[0], self.d2 = $a[1], self.b1 = $a[2], self.b2 = $a[3];
        return self.$prepare();
      };

      return (def.$prepare = function() {
        var $a, $b, TMP_32, $c, TMP_34, self = this, ind = nil;
        ind = $hash2([], {});
        ($a = ($b = self.b1).$each_with_index, $a._p = (TMP_32 = function(v1, i1){var self = TMP_32._s || this, $a, $b, TMP_33;
          if (self.b2 == null) self.b2 = nil;
if (v1 == null) v1 = nil;if (i1 == null) i1 = nil;
        return ($a = ($b = self.b2).$each_with_index, $a._p = (TMP_33 = function(v2, i2){var self = TMP_33._s || this, $a, v = nil;if (v2 == null) v2 = nil;if (i2 == null) i2 = nil;
          v = $scope.Cqls.$quantize(v1['$+'](v2));
            if (($a = ind.$keys()['$include?'](v)) !== false && $a !== nil) {
              return ind['$[]'](v)['$<<']([i1, i2])
              } else {
              return ind['$[]='](v, [[i1, i2]])
            };}, TMP_33._s = self, TMP_33), $a).call($b)}, TMP_32._s = self, TMP_32), $a).call($b);
        self.bounds = ind.$keys().$sort();
        self.pdf = [];
        return ($a = ($c = self.bounds).$each_with_index, $a._p = (TMP_34 = function(v, i){var self = TMP_34._s || this, $a, $b, TMP_35;
          if (self.pdf == null) self.pdf = nil;
if (v == null) v = nil;if (i == null) i = nil;
        self.pdf['$[]='](i, 0);
          return ($a = ($b = ind['$[]'](v)).$each, $a._p = (TMP_35 = function(j1, j2){var self = TMP_35._s || this, $a, $b;
            if (self.pdf == null) self.pdf = nil;
            if (self.d1 == null) self.d1 = nil;
            if (self.b1 == null) self.b1 = nil;
            if (self.d2 == null) self.d2 = nil;
            if (self.b2 == null) self.b2 = nil;
if (j1 == null) j1 = nil;if (j2 == null) j2 = nil;
          return ($a = i, $b = self.pdf, $b['$[]=']($a, $b['$[]']($a)['$+'](self.d1.density(self.b1['$[]'](j1))* self.d2.density(self.b2['$[]'](j2)))))}, TMP_35._s = self, TMP_35), $a).call($b);}, TMP_34._s = self, TMP_34), $a).call($c);
      }, nil);
    })(self, null);

    $opal.cdecl($scope, 'PREC4DISC', 0);

    $opal.defs($scope.Cqls, '$quantize', function(x, prec) {
      var self = this;
      if (prec == null) {
        prec = $scope.PREC4DISC
      }
      return parseFloat(x.toFixed(prec));
    });

    $opal.defs($scope.Cqls, '$equal', function(a, b) {
      var self = this;
      return a.toFixed($scope.PREC4DISC)===b.toFixed($scope.PREC4DISC);
    });

    $opal.defs($scope.Cqls, '$range', function(low, high, step) {
      var self = this;
      
			// From: http://phpjs.org/functions
			// +   original by: Waldo Malqui Silva
			// *     example 1: range ( 0, 12 );
			// *     returns 1: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
			// *     example 2: range( 0, 100, 10 );
			// *     returns 2: [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
			// *     example 3: range( 'a', 'i' );
			// *     returns 3: ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']
			// *     example 4: range( 'c', 'a' );
			// *     returns 4: ['c', 'b', 'a']
			var matrix = [];
			var inival, endval, plus;
			var walker = step || 1;
			var chars = false;

			if (!isNaN(low) && !isNaN(high)) {
			inival = low;
			endval = high;
			} else if (isNaN(low) && isNaN(high)) {
			chars = true;
			inival = low.charCodeAt(0);
			endval = high.charCodeAt(0);
			} else {
			inival = (isNaN(low) ? 0 : low);
			endval = (isNaN(high) ? 0 : high);
			}

			plus = ((inival > endval) ? false : true);
			if (plus) {
			while (inival <= endval) {
			  matrix.push(((chars) ? String.fromCharCode(inival) : inival));
			  inival += walker;
			}
			} else {
			while (inival >= endval) {
			  matrix.push(((chars) ? String.fromCharCode(inival) : inival));
			  inival -= walker;
			}
			}

			return matrix;
		
    });

    $opal.defs($scope.Cqls, '$seq', function(min, max, length) {
      var self = this;
      
			var arr = [],
			hival = Math.pow(10, 17 - ~~(Math.log(((max > 0) ? max : -max)) * Math.LOG10E)),
			step = (max * hival - min * hival) / ((length - 1) * hival),
			current = min,
			cnt = 0;
			// current is assigned using a technique to compensate for IEEE error
			for (; current <= max; cnt++, current = (min * hival + step * hival * cnt) / hival)
				arr.push(current);
			return arr;
		
    });
    
  })(self)
})(Opal);
