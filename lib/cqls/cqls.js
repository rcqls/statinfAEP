/* Generated by Opal 0.5.5 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $slice = $opal.slice, $klass = $opal.klass, $module = $opal.module, $hash2 = $opal.hash2, $breaker = $opal.breaker, $range = $opal.range;
  $opal.add_stubs(['$xy', '$keys', '$to_s', '$<=', '$method', '$aep', '$density', '$style=', '$playLongDensityBasic', '$setTCL', '$attachCurve', '$setDistrib', '$to_X', '$playLongDensityWithTransfHidden', '$floor', '$>=', '$transitionPtsTransf', '$attachExpAxis', '$attr_accessor', '$setTransf', '$seq', '$reset', '$distrib', '$setTransfDistrib', '$id', '$attachSummary', '$inject', '$setNbSim', '$drawCont', '$transitionHistPtsAndRects', '$maxPdf', '$applyTransfByIndex', '$style', '$each_key', '$===', '$showExpAxis', '$<<', '$adjust', '$setMLevel', '$isModeHidden?', '$updateBounds', '$sample', '$transitionInitHist', '$graph=', '$playNextAfter', '$==', '$min', '$>', '$name', '$addChild', '$[]=', '$p', '$playLongDensityBasicHidden', '$showZoom', '$show', '$transitionInitRects', '$synced?', '$variance', '$counts', '$setAsTransfOf', '$[]', '$drawMean', '$init', '$add', '$to_Y', '$qbounds', '$addXY', '$**', '$type', '$step', '$bounds', '$<', '$to_f', '$hideAll', '$y', '$include?', '$applyTransfByValue', '$syncedChildren', '$join', '$drawDisc', '$allowLevelChange', '$syncTo', '$graph', '$dup', '$/', '$-@', '$showSummary', '$pdf', '$setN', '$to_a', '$transitionInitPts', '$update', '$regular?', '$setCurHist', '$length', '$quantize', '$abs', '$initDistrib', '$max', '$power', '$transitionInitPtsTransf', '$call', '$set', '$-', '$playLongDensityWithTransf', '$acceptLevelNext', '$setDistribAs', '$quantile', '$transitionDrawPts', '$transfMode', '$shape', '$select', '$setDistribAsTransf', '$each_with_index', '$showTCL', '$transitionFallPts', '$drawSD', '$map', '$xylim', '$new', '$index', '$partBounds', '$initXYLim', '$prepare', '$drawSummary', '$plot=', '$mean', '$map!', '$zoom', '$+', '$drawCurve', '$empty?', '$updateHistAEP', '$draw', '$dim', '$active=', '$stdDev', '$sort', '$transitionInitTransf', '$each', '$initStep', '$*', '$initTransfList']);
  return (function($base) {
    var self = $module($base, 'Cqls');

    var def = self._proto, $scope = self._scope;
    (function($base, $super) {
      function $Plot(){};
      var self = $Plot = $klass($base, $super, 'Plot', $Plot);

      var def = $Plot._proto, $scope = $Plot._scope;
      def.dim = def.frame = def.style = def.axisShape = def.updateCalls = def.graph = def.parent = nil;
      self.$attr_accessor("parent", "frame", "style", "graph", "dim");

      def.$initialize = function(dim, style) {
        var $a, self = this;
        if (dim == null) {
          dim = $hash2(["x", "y", "w", "h"], {"x": 0, "y": 0, "w": cqls.i.dim.w, "h": cqls.i.dim.h})
        }
        if (style == null) {
          style = $hash2(["bg"], {"bg": "#88FF88"})
        }
        $a = [dim, style], self.dim = $a[0], self.style = $a[1];
        self.parent = new createjs.Container();
        self.frame = new createjs.Shape();
        self.graph = ($scope.Cqls)._scope.Graph.$new(self.dim);
        self.updateCalls = [];
        self.frame.graphics.beginLinearGradientFill(["#FFF",self.style['$[]']("bg")], [0, 1], 0, self.dim['$[]']("y")+20, 0, self.dim['$[]']("y")+self.dim['$[]']("h")+20).drawRect(self.dim['$[]']("x"),self.dim['$[]']("y"),self.dim['$[]']("w"),self.dim['$[]']("h"));
        self.$addChild(self.frame);
        self.axisShape = new createjs.Shape();
        return self.$addChild(self.axisShape, [self, "drawAxis"]);
      };

      def.$addChild = function(child, updateCall, pos) {
        var $a, self = this, shape = nil;
        if (updateCall == null) {
          updateCall = nil
        }
        if (pos == null) {
          pos = -1
        }
        shape = child;
        if (updateCall !== false && updateCall !== nil) {
          self.updateCalls['$<<']([child, updateCall])};
        if (($a = child.shape == null) === false || $a === nil) {
          shape = child.$shape();
          child['$plot='](self);
          child['$graph='](self.graph);
          self.graph.$add(child);};
        if (pos['$>='](0)) {
          return self.parent.addChildAt(shape,pos);
          } else {
          return self.parent.addChild(shape);
        };
      };

      def.$update = function() {
        var $a, $b, TMP_1, self = this;
        return ($a = ($b = self.updateCalls).$each, $a._p = (TMP_1 = function(k, v){var self = TMP_1._s || this, $a, args = nil;if (k == null) k = nil;if (v == null) v = nil;
        args = v['$[]'](2);
          if (($a = args) === false || $a === nil) {
            args = []};
          return ($a = v['$[]'](0).$method(v['$[]'](1))).$call.apply($a, [].concat(args));}, TMP_1._s = self, TMP_1), $a).call($b);
      };

      return (def.$drawAxis = function() {
        var self = this;
        return self.axisShape.graphics.ss(3,2).s("#000").mt(self.dim['$[]']("x"),self.graph.$to_Y(0.0)).lt(self.dim['$[]']("x")['$+'](self.dim['$[]']("w")),self.graph.$to_Y(0.0)).es();
      }, nil);
    })(self, null);

    (function($base, $super) {
      function $Graph(){};
      var self = $Graph = $klass($base, $super, 'Graph', $Graph);

      var def = $Graph._proto, $scope = $Graph._scope;
      def.marg = def.dim = def.xylim0 = def.list = def.synced = def.xylim = def.zoom = def.tr = def.syncedChildren = def.active = def.zoomShapes = nil;
      self.$attr_accessor("xylim", "dim", "active", "syncedChildren", "zoom", "marg");

      $opal.defs($scope.Graph, '$adjust', function(inter, more) {
        var self = this, l = nil;
        if (more == null) {
          more = 0
        }
        l = (inter['$[]'](1)['$-'](inter['$[]'](0)))['$*'](more);
        return [inter['$[]'](0)['$-'](more), inter['$[]'](1)['$+'](more)];
      });

      def.$initialize = function(dim, xlim, ylim, style) {
        var $a, self = this;
        if (xlim == null) {
          xlim = []
        }
        if (ylim == null) {
          ylim = []
        }
        if (style == null) {
          style = nil
        }
        $a = [dim, style], self.dim = $a[0], self.style = $a[1];
        self.marg = $hash2(["l", "r", "t", "b"], {"l": 0.1, "r": 0.1, "t": 0.2, "b": 0.1});
        if (self.marg['$[]']("l")['$<'](1)) {
          self.marg['$[]=']("l", self.dim['$[]']("w")['$*'](self.marg['$[]']("l")))};
        if (self.marg['$[]']("r")['$<'](1)) {
          self.marg['$[]=']("r", self.dim['$[]']("w")['$*'](self.marg['$[]']("r")))};
        if (self.marg['$[]']("t")['$<'](1)) {
          self.marg['$[]=']("t", self.dim['$[]']("h")['$*'](self.marg['$[]']("t")))};
        if (self.marg['$[]']("b")['$<'](1)) {
          self.marg['$[]=']("b", self.dim['$[]']("h")['$*'](self.marg['$[]']("b")))};
        self.xylim0 = $hash2(["x", "y"], {"x": xlim, "y": ylim});
        $a = [[], []], self.list = $a[0], self.active = $a[1];
        if (($a = self.xylim0['$[]']("x")['$empty?']()) === false || $a === nil) {
          self.list['$<<'](self.xylim0)};
        self.xylim = $hash2(["x", "y"], {"x": [], "y": []});
        self.tr = $hash2([], {});
        self.zoom = $hash2(["x0", "x1", "y0", "y1", "active"], {"x0": 0.0, "x1": 0.0, "y0": 0.0, "y1": 0.0, "active": false});
        return self.syncedChildren = [];
      };

      def.$syncTo = function(graph) {
        var self = this;
        self.xylim = graph.$xylim();
        self.zoom = graph.$zoom();
        graph.$syncedChildren()['$<<'](self);
        return self.synced = true;
      };

      def['$synced?'] = function() {
        var self = this;
        return self.synced;
      };

      def.$update = function(active) {
        var $a, $b, TMP_2, $c, TMP_3, $d, TMP_4, $e, TMP_5, $f, TMP_6, $g, TMP_7, self = this, list = nil;
        if (active == null) {
          active = self.active
        }
        if (($a = self['$synced?']()) === false || $a === nil) {
          list = ($a = ($b = self.list).$select, $a._p = (TMP_2 = function(e){var self = TMP_2._s || this, $a;if (e == null) e = nil;
          return ((($a = active['$empty?']()) !== false && $a !== nil) ? $a : (active['$include?'](e['$[]'](1))))}, TMP_2._s = self, TMP_2), $a).call($b);
          self.xylim['$[]']("x")['$[]='](0, ($a = ($c = list).$map, $a._p = (TMP_3 = function(e){var self = TMP_3._s || this, e2 = nil;if (e == null) e = nil;
          e2 = ((function() {if (e['$[]'](0)['$==']("element")) {
              return e['$[]'](2).$xylim()
              } else {
              return e['$[]'](2)
            }; return nil; })());
            return e2['$[]']("x")['$[]'](0);}, TMP_3._s = self, TMP_3), $a).call($c).$min());
          self.xylim['$[]']("x")['$[]='](1, ($a = ($d = list).$map, $a._p = (TMP_4 = function(e){var self = TMP_4._s || this, e2 = nil;if (e == null) e = nil;
          e2 = ((function() {if (e['$[]'](0)['$==']("element")) {
              return e['$[]'](2).$xylim()
              } else {
              return e['$[]'](2)
            }; return nil; })());
            return e2['$[]']("x")['$[]'](1);}, TMP_4._s = self, TMP_4), $a).call($d).$max());
          self.xylim['$[]']("y")['$[]='](0, ($a = ($e = list).$map, $a._p = (TMP_5 = function(e){var self = TMP_5._s || this, e2 = nil;if (e == null) e = nil;
          e2 = ((function() {if (e['$[]'](0)['$==']("element")) {
              return e['$[]'](2).$xylim()
              } else {
              return e['$[]'](2)
            }; return nil; })());
            return e2['$[]']("y")['$[]'](0);}, TMP_5._s = self, TMP_5), $a).call($e).$min());
          self.xylim['$[]']("y")['$[]='](1, ($a = ($f = list).$map, $a._p = (TMP_6 = function(e){var self = TMP_6._s || this, e2 = nil;if (e == null) e = nil;
          e2 = ((function() {if (e['$[]'](0)['$==']("element")) {
              return e['$[]'](2).$xylim()
              } else {
              return e['$[]'](2)
            }; return nil; })());
            return e2['$[]']("y")['$[]'](1);}, TMP_6._s = self, TMP_6), $a).call($f).$max());};
        $a = [(self.xylim['$[]']("x")['$[]'](1)['$+'](self.zoom['$[]']("x1"))['$-'](self.xylim['$[]']("x")['$[]'](0))['$-'](self.zoom['$[]']("x0")))['$/']((self.dim['$[]']("w")['$-'](self.marg['$[]']("l"))['$-'](self.marg['$[]']("r")))), (self.xylim['$[]']("y")['$[]'](0)['$+'](self.zoom['$[]']("y0"))['$-'](self.xylim['$[]']("y")['$[]'](1))['$-'](self.zoom['$[]']("y1")))['$/']((self.dim['$[]']("h")['$-'](self.marg['$[]']("t"))['$-'](self.marg['$[]']("b"))))], self.tr['$[]=']("ax", $a[0]), self.tr['$[]=']("ay", $a[1]);
        $a = [self.xylim['$[]']("x")['$[]'](0)['$+'](self.zoom['$[]']("x0"))['$-'](self.tr['$[]']("ax")['$*']((self.dim['$[]']("x")['$+'](self.marg['$[]']("l"))))), self.xylim['$[]']("y")['$[]'](1)['$+'](self.zoom['$[]']("y1"))['$-'](self.tr['$[]']("ay")['$*']((self.dim['$[]']("y")['$+'](self.marg['$[]']("t")))))], self.tr['$[]=']("bx", $a[0]), self.tr['$[]=']("by", $a[1]);
        if (($a = self.syncedChildren['$empty?']()) !== false && $a !== nil) {
          return nil
          } else {
          return ($a = ($g = self.syncedChildren).$each, $a._p = (TMP_7 = function(c){var self = TMP_7._s || this;if (c == null) c = nil;
          return c.$update()}, TMP_7._s = self, TMP_7), $a).call($g)
        };
      };

      def.$setActive = function(ary) {
        var self = this;
        return self.active = ary;
      };

      def.$add = function(element, mode, id) {
        var $a, self = this, $case = nil;
        if (mode == null) {
          mode = "element"
        }
        if (id == null) {
          id = nil
        }
        if (($a = self['$synced?']()) !== false && $a !== nil) {
          return nil};
        return (function() {$case = mode;if ("element"['$===']($case)) {if (($a = element.$xylim()) !== false && $a !== nil) {
          self.list['$<<'](["element", ((($a = id) !== false && $a !== nil) ? $a : element.$id()), element]);
          return self.$update();
          } else {
          return nil
        }}else if ("xylim"['$===']($case)) {self.list['$<<'](["xylim", id, element]);
        return self.$update();}else { return nil }})();
      };

      def.$addXYLim = function(id, x0, x1, y0, y1) {
        var self = this;
        return self.$add($hash2(["x", "y"], {"x": [x0, x1], "y": [y0, y1]}), "xylim", id);
      };

      def.$to_x = function(x) {
        var self = this;
        return self.tr['$[]']("ax")['$*'](x)['$+'](self.tr['$[]']("bx"));
      };

      def.$to_X = function(x) {
        var self = this;
        return (x['$-'](self.tr['$[]']("bx")))['$/'](self.tr['$[]']("ax"));
      };

      def.$to_y = function(y) {
        var self = this;
        return self.tr['$[]']("ay")['$*'](y)['$+'](self.tr['$[]']("by"));
      };

      def.$to_Y = function(y) {
        var self = this;
        return (y['$-'](self.tr['$[]']("by")))['$/'](self.tr['$[]']("ay"));
      };

      def.$to_local = function(x, y) {
        var self = this;
        return [self.tr['$[]']("ax")['$*'](x)['$+'](self.tr['$[]']("bx")), self.tr['$[]']("ay")['$*'](y)['$+'](self.tr['$[]']("by"))];
      };

      def.$to_global = function(x, y) {
        var self = this;
        return [(x['$-'](self.tr['$[]']("bx")))['$/'](self.tr['$[]']("ax")), (y['$-'](self.tr['$[]']("by")))['$/'](self.tr['$[]']("ay"))];
      };

      def.$zoomActive = function() {
        var self = this;
        return self.zoom['$[]']("active");
      };

      def.$toggleZoomTo = function(plot, type) {
        var $a, $b, TMP_8, $c, TMP_9, $d, TMP_10, self = this, keys = nil;
        if (type == null) {
          type = ["xpos", "xneg", "ypos", "reset"]
        }
        self.zoom['$[]=']("active", ($a = self.zoom['$[]']("active"), ($a === nil || $a === false)));
        if (($a = self.zoom['$[]']("active")) !== false && $a !== nil) {
          if (($a = self.zoomShapes) === false || $a === nil) {
            self.zoomShapes = $hash2([], {});
            keys = [];
            if (($a = type['$include?']("xpos")) !== false && $a !== nil) {
              keys = keys['$+'](["xposmore", "xposless"])};
            if (($a = type['$include?']("xneg")) !== false && $a !== nil) {
              keys = keys['$+'](["xnegmore", "xnegless"])};
            if (($a = type['$include?']("ypos")) !== false && $a !== nil) {
              keys = keys['$+'](["yposmore", "yposless"])};
            if (($a = type['$include?']("yneg")) !== false && $a !== nil) {
              keys = keys['$+'](["ynegmore", "ynegless"])};
            if (($a = type['$include?']("reset")) !== false && $a !== nil) {
              keys = keys['$+'](["reset"])};
            ($a = ($b = keys).$each, $a._p = (TMP_8 = function(k){var self = TMP_8._s || this;
              if (self.zoomShapes == null) self.zoomShapes = nil;
if (k == null) k = nil;
            return self.zoomShapes['$[]='](k, new createjs.Shape())}, TMP_8._s = self, TMP_8), $a).call($b);};
          ($a = ($c = self.zoomShapes).$each_key, $a._p = (TMP_9 = function(k){var self = TMP_9._s || this;
            if (self.zoomShapes == null) self.zoomShapes = nil;
if (k == null) k = nil;
          
						plot.parent.addChild(self.zoomShapes['$[]'](k))
					;}, TMP_9._s = self, TMP_9), $a).call($c);
          return self.$showZoom();
          } else {
          return ($a = ($d = self.zoomShapes).$each_key, $a._p = (TMP_10 = function(k){var self = TMP_10._s || this;
            if (self.zoomShapes == null) self.zoomShapes = nil;
if (k == null) k = nil;
          
						plot.parent.removeChild(self.zoomShapes['$[]'](k))
					;}, TMP_10._s = self, TMP_10), $a).call($d)
        };
      };

      def.$showZoom = function() {
        var $a, $b, TMP_11, self = this, size = nil, inter = nil;
        size = 40;
        inter = 15;
        return ($a = ($b = self.zoomShapes).$each_key, $a._p = (TMP_11 = function(k){var self = TMP_11._s || this, $case = nil;
          if (self.zoomShapes == null) self.zoomShapes = nil;
          if (self.dim == null) self.dim = nil;
if (k == null) k = nil;
        self.zoomShapes['$[]'](k).alpha=0.5;
          return (function() {$case = k;if ("xposmore"['$===']($case)) {return self.zoomShapes['$[]']("xposmore").graphics.c().s("#000").f("#FFF").mt(self.dim['$[]']("w")-1.5*size,self.dim['$[]']("h")['$/'](2.0)-size['$/'](2)).lt(self.dim['$[]']("w")-1.5*size,self.dim['$[]']("h")['$/'](2.0)+size['$/'](2)).lt(self.dim['$[]']("w")-0.5*size,self.dim['$[]']("h")['$/'](2.0)).cp() ;}else if ("xposless"['$===']($case)) {return self.zoomShapes['$[]']("xposless").graphics.c().s("#000").f("#FFF").mt(self.dim['$[]']("w")-1.5*size-inter,self.dim['$[]']("h")['$/'](2.0)-size['$/'](2)).lt(self.dim['$[]']("w")-1.5*size-inter,self.dim['$[]']("h")['$/'](2.0)+size['$/'](2)).lt(self.dim['$[]']("w")-2.5*size-inter,self.dim['$[]']("h")['$/'](2.0)).cp() ;}else if ("xnegmore"['$===']($case)) {return self.zoomShapes['$[]']("xnegmore").graphics.c().s("#000").f("#FFF").mt(1.5*size,self.dim['$[]']("h")['$/'](2.0)-size['$/'](2)).lt(1.5*size,self.dim['$[]']("h")['$/'](2.0)+size['$/'](2)).lt(0.5*size,self.dim['$[]']("h")['$/'](2.0)).cp() ;}else if ("xnegless"['$===']($case)) {return self.zoomShapes['$[]']("xnegless").graphics.c().s("#000").f("#FFF").mt(1.5*size+inter,self.dim['$[]']("h")['$/'](2.0)-size['$/'](2)).lt(1.5*size+inter,self.dim['$[]']("h")['$/'](2.0)+size['$/'](2)).lt(2.5*size+inter,self.dim['$[]']("h")['$/'](2.0)).cp() ;}else if ("ynegmore"['$===']($case)) {return self.zoomShapes['$[]']("ynegmore").graphics.c().s("#000").f("#FFF").mt(self.dim['$[]']("w")['$/'](2.0)-size['$/'](2),self.dim['$[]']("h")-1.5*size).lt(self.dim['$[]']("w")['$/'](2.0)+size['$/'](2),self.dim['$[]']("h")-1.5*size).lt(self.dim['$[]']("w")['$/'](2.0),self.dim['$[]']("h")-0.5*size).cp() ;}else if ("ynegless"['$===']($case)) {return self.zoomShapes['$[]']("ynegless").graphics.c().s("#000").f("#FFF").mt(self.dim['$[]']("w")['$/'](2.0)-size['$/'](2),self.dim['$[]']("h")-1.5*size-inter).lt(self.dim['$[]']("w")['$/'](2.0)+size['$/'](2),self.dim['$[]']("h")-1.5*size-inter).lt(self.dim['$[]']("w")['$/'](2.0),self.dim['$[]']("h")-2.5*size-inter).cp() ;}else if ("yposmore"['$===']($case)) {return self.zoomShapes['$[]']("yposmore").graphics.c().s("#000").f("#FFF").mt(self.dim['$[]']("w")['$/'](2.0)-size['$/'](2),1.5*size).lt(self.dim['$[]']("w")['$/'](2.0)+size['$/'](2),1.5*size).lt(self.dim['$[]']("w")['$/'](2.0),0.5*size).cp() ;}else if ("yposless"['$===']($case)) {return self.zoomShapes['$[]']("yposless").graphics.c().s("#000").f("#FFF").mt(self.dim['$[]']("w")['$/'](2.0)-size['$/'](2),1.5*size+inter).lt(self.dim['$[]']("w")['$/'](2.0)+size['$/'](2),1.5*size+inter).lt(self.dim['$[]']("w")['$/'](2.0),2.5*size+inter).cp() ;}else if ("reset"['$===']($case)) {return self.zoomShapes['$[]']("reset").graphics.c().s("#000").f("#FFF").drawRect(self.dim['$[]']("w")['$/'](2.0)-size['$/'](2), self.dim['$[]']("h")['$/'](2.0)-size['$/'](2),size,size) ;}else { return nil }})();}, TMP_11._s = self, TMP_11), $a).call($b);
      };

      return (def.$hitZoom = function(x, y) {
        var $a, $b, TMP_12, $c, self = this, select = nil, step = nil, $case = nil;
        if (($a = self.zoom['$[]']("active")) === false || $a === nil) {
          return nil};
        select = "none";
        ($a = ($b = self.zoomShapes).$each_key, $a._p = (TMP_12 = function(k){var self = TMP_12._s || this;
          if (self.zoomShapes == null) self.zoomShapes = nil;
if (k == null) k = nil;
        if(self.zoomShapes['$[]'](k).hitTest(x, y)) {select=k};;
          if (select['$==']("none")) {
            return nil
            } else {
            return ($breaker.$v = nil, $breaker)
          };}, TMP_12._s = self, TMP_12), $a).call($b);
        if (select['$==']("none")) {
          return select};
        step = (0.1)['$/'](2);
        $case = select;if ("xposmore"['$===']($case)) {($a = "x1", $c = self.zoom, $c['$[]=']($a, $c['$[]']($a)['$+'](step['$*']((self.xylim['$[]']("x")['$[]'](1)['$-'](self.xylim['$[]']("x")['$[]'](0)))))))}else if ("xposless"['$===']($case)) {if (($a = self.zoom['$[]']("x1")['$<']((step['$-']((1)['$/'](2)))['$*']((self.xylim['$[]']("x")['$[]'](1)['$-'](self.xylim['$[]']("x")['$[]'](0)))))) === false || $a === nil) {
          self.zoom['$[]=']("x1", self.zoom['$[]']("x1")['$-'](step['$*']((self.xylim['$[]']("x")['$[]'](1)['$-'](self.xylim['$[]']("x")['$[]'](0))))))}}else if ("xnegmore"['$===']($case)) {self.zoom['$[]=']("x0", self.zoom['$[]']("x0")['$-'](step['$*']((self.xylim['$[]']("x")['$[]'](1)['$-'](self.xylim['$[]']("x")['$[]'](0))))))}else if ("xnegless"['$===']($case)) {if (($a = self.zoom['$[]']("x0")['$>'](((1)['$/'](2)['$-'](step))['$*']((self.xylim['$[]']("x")['$[]'](1)['$-'](self.xylim['$[]']("x")['$[]'](0)))))) === false || $a === nil) {
          ($a = "x0", $c = self.zoom, $c['$[]=']($a, $c['$[]']($a)['$+'](step['$*']((self.xylim['$[]']("x")['$[]'](1)['$-'](self.xylim['$[]']("x")['$[]'](0)))))))}}else if ("yposmore"['$===']($case)) {($a = "y1", $c = self.zoom, $c['$[]=']($a, $c['$[]']($a)['$+'](step['$*']((self.xylim['$[]']("y")['$[]'](1)['$-'](self.xylim['$[]']("y")['$[]'](0)))))))}else if ("yposless"['$===']($case)) {if (($a = self.zoom['$[]']("y1")['$<']((step['$-']((1)['$/'](2)))['$*']((self.xylim['$[]']("y")['$[]'](1)['$-'](self.xylim['$[]']("y")['$[]'](0)))))) === false || $a === nil) {
          self.zoom['$[]=']("y1", self.zoom['$[]']("y1")['$-'](step['$*']((self.xylim['$[]']("y")['$[]'](1)['$-'](self.xylim['$[]']("y")['$[]'](0))))))}}else if ("ynegmore"['$===']($case)) {self.zoom['$[]=']("y0", self.zoom['$[]']("y1")['$-'](step['$*']((self.xylim['$[]']("y")['$[]'](1)['$-'](self.xylim['$[]']("y")['$[]'](0))))))}else if ("ynegless"['$===']($case)) {if (($a = self.zoom['$[]']("y0")['$>'](((1)['$/'](2)['$-'](step))['$*']((self.xylim['$[]']("y")['$[]'](1)['$-'](self.xylim['$[]']("y")['$[]'](0)))))) === false || $a === nil) {
          ($a = "y0", $c = self.zoom, $c['$[]=']($a, $c['$[]']($a)['$+'](step['$*']((self.xylim['$[]']("y")['$[]'](1)['$-'](self.xylim['$[]']("y")['$[]'](0)))))))}}else if ("reset"['$===']($case)) {self.zoom['$[]=']("x0", self.zoom['$[]=']("x1", self.zoom['$[]=']("y0", self.zoom['$[]=']("y1", 0.0))))};
        return select;
      }, nil);
    })(self, null);

    (function($base, $super) {
      function $Child(){};
      var self = $Child = $klass($base, $super, 'Child', $Child);

      var def = $Child._proto, $scope = $Child._scope;
      self.$attr_accessor("id", "plot", "graph", "shape", "style", "xylim");

      return (def.$initialize = function() {
        var self = this;
        return nil;
      }, nil);
    })(self, null);

    (function($base, $super) {
      function $Curve(){};
      var self = $Curve = $klass($base, $super, 'Curve', $Curve);

      var def = $Curve._proto, $scope = $Curve._scope;
      def.type = def.bounds = def.length = def.plot = def.expAxisShape = def.graph = def.summaryShapes = def.distrib = def.step = def.x = def.y = def.shape = def.style = nil;
      self.$attr_accessor("distrib", "bounds", "kind", "type", "style");

      def.$initialize = function(id, type, bounds, style, length) {
        var $a, $b, self = this, $case = nil;
        if (id == null) {
          id = nil
        }
        if (type == null) {
          type = "cont"
        }
        if (bounds == null) {
          bounds = [0, 1]
        }
        if (style == null) {
          style = $hash2(["close", "stroke", "fill", "thickness"], {"close": true, "stroke": "#000", "fill": "rgba(200,200,255,0.5)", "thickness": 3})
        }
        if (length == null) {
          length = 512
        }
        if (($a = (($b = $opal.cvars['@@curveCpt']) == null ? nil : $b)) === false || $a === nil) {
          ($opal.cvars['@@curveCpt'] = -1)};
        self.id = ((($a = id) !== false && $a !== nil) ? $a : "curve"['$+']((($opal.cvars['@@curveCpt'] = (($b = $opal.cvars['@@curveCpt']) == null ? nil : $b)['$+'](1))).$to_s()));
        self.type = type;
        $case = self.type;if ("cont"['$===']($case)) {$a = [bounds, length], self.bounds = $a[0], self.length = $a[1]}else if ("disc"['$===']($case)) {self.bounds = bounds;
        self.length = self.bounds.$length();
        self.$initStep();};
        self.style = style;
        self.shape = new createjs.Shape();
        self.x = $scope.Cqls.$seq(self.bounds['$[]'](0), self.bounds['$[]'](1), self.length);
        self.kind = "density";
        self.summaryShapes = [new createjs.Shape(), new createjs.Shape()];
        return self.expAxisShape = new createjs.Shape();
      };

      def.$attachExpAxis = function(ratio) {
        var self = this;
        return self.plot.$addChild(self.expAxisShape, [self, "drawExpAxis", [ratio]]);
      };

      def.$drawExpAxis = function(ratio) {
        var self = this;
        self.expAxisShape.visible=true;
        return self.expAxisShape.graphics.c().s("#000").ss(1).mt(self.graph.$dim()['$[]']("x"),self.graph.$dim()['$[]']("h")['$*'](ratio)).lt(self.graph.$dim()['$[]']("x")['$+'](self.graph.$dim()['$[]']("w")),self.graph.$dim()['$[]']("h")['$*'](ratio));
      };

      def.$attachSummary = function() {
        var self = this;
        self.plot.$addChild(self.summaryShapes['$[]'](0), [self, "drawMean"]);
        return self.plot.$addChild(self.summaryShapes['$[]'](1), [self, "drawSD"]);
      };

      def.$drawMean = function() {
        var self = this;
        self.summaryShapes['$[]'](0).visible=true;
        return self.summaryShapes['$[]'](0).graphics.c().s("#000").ss(1).mt(self.graph.$to_X(self.distrib.$mean()),self.graph.$dim()['$[]']("y")).lt(self.graph.$to_X(self.distrib.$mean()),self.graph.$dim()['$[]']("y")['$+'](self.graph.$dim()['$[]']("h")));
      };

      def.$drawSD = function() {
        var $a, self = this, x = nil, y = nil, h = nil;
        $a = [10, 10], x = $a[0], y = $a[1];
        h = self.distrib.$maxPdf()['$/'](2.0);
        if (self.type['$==']("disc")) {
          h = h['$/'](self.step)};
        h = self.graph.$to_Y(h);
        self.summaryShapes['$[]'](1).visible=true;
        
				self.summaryShapes['$[]'](1).graphics.c().s("#000").ss(1)		
				.mt(self.graph.$to_X(self.distrib.$mean()['$-'](self.distrib.$stdDev()))+x,h-y)
				.lt(self.graph.$to_X(self.distrib.$mean()['$-'](self.distrib.$stdDev())),h)
				.lt(self.graph.$to_X(self.distrib.$mean()['$-'](self.distrib.$stdDev()))+x,h+y)
				.mt(self.graph.$to_X(self.distrib.$mean()['$-'](self.distrib.$stdDev())),h)
				.lt(self.graph.$to_X(self.distrib.$mean()['$+'](self.distrib.$stdDev())),h)
				.lt(self.graph.$to_X(self.distrib.$mean()['$+'](self.distrib.$stdDev()))-x,h-y)
				.mt(self.graph.$to_X(self.distrib.$mean()['$+'](self.distrib.$stdDev())),h)
				.lt(self.graph.$to_X(self.distrib.$mean()['$+'](self.distrib.$stdDev()))-x,h+y)
			;
      };

      def.$sample = function(n) {
        var self = this;
        if (n == null) {
          n = 1
        }
        return self.distrib.$sample(n);
      };

      def.$y = function(x) {
        var $a, $b, TMP_13, self = this, y = nil;
        y = self.distrib.$pdf(x);
        if (self.distrib.$type()['$==']("disc")) {
          ($a = ($b = y)['$map!'], $a._p = (TMP_13 = function(e){var self = TMP_13._s || this;
            if (self.distrib == null) self.distrib = nil;
if (e == null) e = nil;
          return e['$/'](self.distrib.$step())}, TMP_13._s = self, TMP_13), $a).call($b)};
        y = y.map(function(e) {return Math.random()*e;});
        return y;
      };

      def.$xy = function(n) {
        var self = this, x = nil, y = nil;
        if (n == null) {
          n = 1
        }
        x = self.$sample(n);
        y = self.$y(x);
        return $hash2(["x", "y"], {"x": x, "y": y});
      };

      def.$initStep = function() {
        var $a, $b, TMP_14, self = this;
        return self.step = ($a = ($b = ($range(1, self.bounds.$length(), true))).$map, $a._p = (TMP_14 = function(i){var self = TMP_14._s || this;
          if (self.bounds == null) self.bounds = nil;
if (i == null) i = nil;
        return (self.bounds['$[]'](i)['$-'](self.bounds['$[]'](i['$-'](1)))).$abs()}, TMP_14._s = self, TMP_14), $a).call($b).$min().$to_f();
      };

      def.$setDistrib = function(name, params) {
        var self = this;
        self.distrib = $scope.Distribution.$new();
        self.distrib.$set(name, params);
        return self.$initDistrib();
      };

      def.$setDistribAs = function(dist) {
        var self = this;
        self.distrib = dist;
        return self.$initDistrib();
      };

      def.$setDistribAsTransf = function(transf, dist) {
        var self = this;
        self.distrib = $scope.Distribution.$new();
        self.distrib.$setAsTransfOf(dist, transf);
        return self.$initDistrib();
      };

      def['$regular?'] = function() {
        var self = this;
        return self.distrib['$regular?']();
      };

      def.$initDistrib = function() {
        var $a, $b, TMP_15, self = this, $case = nil;
        self.type = self.distrib.$type();
        self.bounds = self.distrib.$bounds();
        $case = self.type;if ("cont"['$===']($case)) {self.x = $scope.Cqls.$seq(self.bounds['$[]'](0), self.bounds['$[]'](1), self.length)}else if ("disc"['$===']($case)) {self.$initStep();
        self.x = self.bounds;};
        self.y = self.distrib.$pdf(self.x);
        if (self.type['$==']("disc")) {
          ($a = ($b = self.y)['$map!'], $a._p = (TMP_15 = function(e){var self = TMP_15._s || this;
            if (self.step == null) self.step = nil;
if (e == null) e = nil;
          return e['$/'](self.step)}, TMP_15._s = self, TMP_15), $a).call($b)};
        return self.$initXYLim();
      };

      def.$initXYLim = function() {
        var self = this, xlim = nil;
        xlim = (function() {if (self.type['$==']("cont")) {
          return self.bounds
          } else {
          return [self.bounds['$[]'](0)['$-'](self.step['$/'](2.0)), self.bounds['$[]'](-1)['$+'](self.step['$/'](2.0))]
        }; return nil; })();
        return self.xylim = $hash2(["x", "y"], {"x": $scope.Graph.$adjust(xlim), "y": $scope.Graph.$adjust([0, self.y.$max()])});
      };

      def.$draw = function(shape, graph, style) {
        var self = this;
        if (shape == null) {
          shape = self.shape
        }
        if (graph == null) {
          graph = self.graph
        }
        if (style == null) {
          style = self.style
        }
        if (self.type['$==']("cont")) {
          return self.$drawCont(shape, graph, style)
          } else {
          return self.$drawDisc(shape, graph, style)
        };
      };

      def.$drawCont = function(shape, graph, style) {
        var $a, $b, TMP_16, self = this;
        if (shape == null) {
          shape = self.shape
        }
        if (graph == null) {
          graph = self.graph
        }
        if (style == null) {
          style = self.style
        }
        
				shape.graphics.clear();
				if(style['$[]']("close")) {shape.graphics.f(style['$[]']("fill"));}
				shape.graphics.s(style['$[]']("stroke")).ss(style['$[]']("thickness"));
			;
        shape.graphics.mt(graph.$to_X(self.x['$[]'](0)),graph.$to_Y(0.0));
        ($a = ($b = ($range(0, self.x.$length(), true))).$each, $a._p = (TMP_16 = function(i){var self = TMP_16._s || this;
          if (self.x == null) self.x = nil;
          if (self.y == null) self.y = nil;
if (i == null) i = nil;
        return shape.graphics.lt(graph.$to_X(self.x['$[]'](i)),graph.$to_Y(self.y['$[]'](i)));}, TMP_16._s = self, TMP_16), $a).call($b);
        shape.graphics.lt(graph.$to_X(self.x['$[]'](-1)),graph.$to_Y(0.0));
        if (($a = style['$[]']("close")) !== false && $a !== nil) {
          return shape.graphics.cp();
          } else {
          return nil
        };
      };

      return (def.$drawDisc = function(shape, graph, style) {
        var $a, $b, TMP_17, self = this, s = nil;
        if (shape == null) {
          shape = self.shape
        }
        if (graph == null) {
          graph = self.graph
        }
        if (style == null) {
          style = self.style
        }
        s = self.step['$/'](2.0);
        
				shape.graphics.clear();
				if(style['$[]']("close")) {shape.graphics.f(style['$[]']("fill"));}
				shape.graphics.s(style['$[]']("stroke")).ss(style['$[]']("thickness"));
			;
        return ($a = ($b = ($range(0, self.x.$length(), true))).$each, $a._p = (TMP_17 = function(i){var self = TMP_17._s || this, $a;
          if (self.x == null) self.x = nil;
          if (self.y == null) self.y = nil;
if (i == null) i = nil;
        
				 	shape.graphics.mt(graph.$to_X(self.x['$[]'](i)['$-'](s)),graph.$to_Y(0.0))
					.lt(graph.$to_X(self.x['$[]'](i)['$-'](s)),graph.$to_Y(self.y['$[]'](i)))
					.lt(graph.$to_X(self.x['$[]'](i)['$+'](s)),graph.$to_Y(self.y['$[]'](i)))
			 		.lt(graph.$to_X(self.x['$[]'](i)['$+'](s)),graph.$to_Y(0.0))
			 	;
          if (($a = style['$[]']("close")) !== false && $a !== nil) {
            return shape.graphics.cp();
            } else {
            return nil
          };}, TMP_17._s = self, TMP_17), $a).call($b);
      }, nil);
    })(self, $scope.Child);

    (function($base, $super) {
      function $Hist(){};
      var self = $Hist = $klass($base, $super, 'Hist', $Hist);

      var def = $Hist._proto, $scope = $Hist._scope;
      def.type = def.curve = def.curveShape = def.graph = def.style = def.plot = def.summaryShapes = def.nbTot = def.mean = def.step = def.sd = def.bounds = def.nbPart = def.ind = def.levelNext = def.levels = def.cpt = def.level = def.shape = def.aep = nil;
      self.$attr_accessor("bounds", "level", "levels", "nbPart", "nbTot", "curveShape", "type", "aep", "style");

      def.$initialize = function(id, type, bounds, style, levels) {
        var $a, $b, self = this, $case = nil;
        if (id == null) {
          id = nil
        }
        if (type == null) {
          type = "cont"
        }
        if (bounds == null) {
          bounds = [0, 1]
        }
        if (style == null) {
          style = $hash2(["hist", "mean", "sd", "curve"], {"hist": $hash2(["fill", "stroke"], {"fill": "rgba(100,100,255,0.5)", "stroke": "#000000"}), "mean": $hash2(["stroke", "thickness"], {"stroke": "rgba(100,100,255,1)", "thickness": 1}), "sd": $hash2(["stroke", "thickness", "fill"], {"stroke": "rgba(100,100,255,1)", "thickness": 1, "fill": "rgba(100,100,255,1)"}), "curve": $hash2(["close", "fill", "stroke", "thickness"], {"close": false, "fill": "#000", "stroke": "rgba(0,0,0,.4)", "thickness": 3})})
        }
        if (levels == null) {
          levels = 8
        }
        if (($a = (($b = $opal.cvars['@@histCpt']) == null ? nil : $b)) === false || $a === nil) {
          ($opal.cvars['@@histCpt'] = -1)};
        self.id = ((($a = id) !== false && $a !== nil) ? $a : "hist"['$+']((($opal.cvars['@@histCpt'] = (($b = $opal.cvars['@@histCpt']) == null ? nil : $b)['$+'](1))).$to_s()));
        self.type = type;
        $case = self.type;if ("cont"['$===']($case)) {$a = [bounds, levels, 4], self.bounds = $a[0], self.levels = $a[1], self.level = $a[2];
        self.nbPart = (2)['$**'](levels);}else if ("disc"['$===']($case)) {self.bounds = bounds};
        self.$init();
        self.style = style;
        self.shape = new createjs.Shape();
        self.curveShape = new createjs.Shape();
        self.aep = $hash2([], {});
        return self.summaryShapes = [new createjs.Shape(), new createjs.Shape()];
      };

      def.$drawCurve = function() {
        var self = this;
        return self.curve.$draw(self.curveShape, self.graph, self.style['$[]']("curve"));
      };

      def.$attachSummary = function() {
        var self = this;
        self.plot.$addChild(self.summaryShapes['$[]'](0), [self, "drawMean"]);
        return self.plot.$addChild(self.summaryShapes['$[]'](1), [self, "drawSD"]);
      };

      def.$drawMean = function() {
        var self = this;
        self.summaryShapes['$[]'](0).visible=self.nbTot['$>'](0);
        return self.summaryShapes['$[]'](0).graphics.c().s(self.style['$[]']("mean")['$[]']("stroke")).ss(self.style['$[]']("mean")['$[]']("thickness")).mt(self.graph.$to_X(self.mean['$[]'](0)),self.graph.$dim()['$[]']("y")).lt(self.graph.$to_X(self.mean['$[]'](0)),self.graph.$dim()['$[]']("y")['$+'](self.graph.$dim()['$[]']("h")));
      };

      def.$drawSD = function() {
        var $a, self = this, x = nil, y = nil, h = nil;
        $a = [10, 10], x = $a[0], y = $a[1];
        h = self.curve.$distrib().$maxPdf()['$/'](2.0);
        if (self.type['$==']("disc")) {
          h = h['$/'](self.step)};
        h = self.graph.$to_Y(h);
        self.summaryShapes['$[]'](1).visible=self.nbTot['$>'](0);
        
				self.summaryShapes['$[]'](1).graphics.c().s(self.style['$[]']("mean")['$[]']("stroke")).ss(1)
				.mt(self.graph.$to_X(self.mean['$[]'](0)['$-'](self.sd))+x,h-y)
				.lt(self.graph.$to_X(self.mean['$[]'](0)['$-'](self.sd)),h)
				.lt(self.graph.$to_X(self.mean['$[]'](0)['$-'](self.sd))+x,h+y)
				.mt(self.graph.$to_X(self.mean['$[]'](0)['$-'](self.sd)),h)
				.lt(self.graph.$to_X(self.mean['$[]'](0)['$+'](self.sd)),h)
				.lt(self.graph.$to_X(self.mean['$[]'](0)['$+'](self.sd))-x,h-y)
				.mt(self.graph.$to_X(self.mean['$[]'](0)['$+'](self.sd)),h)
				.lt(self.graph.$to_X(self.mean['$[]'](0)['$+'](self.sd))-x,h+y)
			;
      };

      def.$updateBounds = function() {
        var self = this;
        return self.bounds = self.curve.$bounds();
      };

      def['$regular?'] = function() {
        var self = this;
        return self.curve['$regular?']();
      };

      def.$init = function() {
        var $a, $b, TMP_18, $c, TMP_19, self = this, $case = nil;
        $case = self.type;if ("cont"['$===']($case)) {self.step = (self.bounds['$[]'](1)['$-'](self.bounds['$[]'](0))).$to_f()['$/'](self.nbPart);
        $a = [[0]['$*'](self.nbPart), 0], self.cpt = $a[0], self.nbTot = $a[1];
        self.outside = [0]['$*'](2);}else if ("disc"['$===']($case)) {self.step = ($a = ($b = ($range(1, self.bounds.$length(), true))).$map, $a._p = (TMP_18 = function(i){var self = TMP_18._s || this;
          if (self.bounds == null) self.bounds = nil;
if (i == null) i = nil;
        return (self.bounds['$[]'](i)['$-'](self.bounds['$[]'](i['$-'](1)))).$abs()}, TMP_18._s = self, TMP_18), $a).call($b).$min();
        $a = [[0]['$*'](self.bounds.$length()), 0], self.cpt = $a[0], self.nbTot = $a[1];
        self.outside = [0]['$*'](2);
        if (($a = self['$regular?']()) === false || $a === nil) {
          self.ind = $hash2([], {});
          ($a = ($c = self.bounds).$each_with_index, $a._p = (TMP_19 = function(v, i){var self = TMP_19._s || this;
            if (self.ind == null) self.ind = nil;
if (v == null) v = nil;if (i == null) i = nil;
          return self.ind['$[]='](v, i)}, TMP_19._s = self, TMP_19), $a).call($c);};};
        return $a = [[0, 0], 0], self.mean = $a[0], self.sd = $a[1];
      };

      def.$index = function(x) {
        var $a, self = this;
        if (($a = self['$regular?']()) !== false && $a !== nil) {
          return ((x['$-'](self.bounds['$[]'](0)))['$/'](self.step)).$floor()
          } else {
          return self.ind['$[]']($scope.Cqls.$quantize(x))
        };
      };

      def.$reset = function(type) {
        var self = this;
        if (type == null) {
          type = nil
        }
        self.type = (function() {if (type !== false && type !== nil) {
          return type
          } else {
          return self.curve.$type()
        }; return nil; })();
        self.$updateBounds();
        return self.$init();
      };

      def.$attachCurve = function(curve) {
        var self = this;
        self.curve = curve;
        self.$reset();
        self.graph.$add(self.curve);
        self.$drawCurve();
        self.plot.$addChild(self.curveShape, [self, "drawCurve"], 1);
        return self.curveShape.visible=false;
      };

      def.$add = function(x) {
        var $a, $b, TMP_20, $c, TMP_21, $d, TMP_22, $e, TMP_23, self = this, $case = nil;
        $case = self.type;if ("cont"['$===']($case)) {($a = ($b = x).$each, $a._p = (TMP_20 = function(e){var self = TMP_20._s || this, $a, $b;
          if (self.bounds == null) self.bounds = nil;
          if (self.cpt == null) self.cpt = nil;
          if (self.outside == null) self.outside = nil;
if (e == null) e = nil;
        if (($a = (($b = self.bounds['$[]'](0)['$<='](e)) ? e['$<='](self.bounds['$[]'](-1)) : $b)) !== false && $a !== nil) {
            return ($a = self.$index(e), $b = self.cpt, $b['$[]=']($a, $b['$[]']($a)['$+'](1)))
            } else {
            if (e['$<'](self.bounds['$[]'](0))) {
              ($a = 0, $b = self.outside, $b['$[]=']($a, $b['$[]']($a)['$+'](1)))};
            if (e['$>'](self.bounds['$[]'](-1))) {
              return ($a = 1, $b = self.outside, $b['$[]=']($a, $b['$[]']($a)['$+'](1)))
              } else {
              return nil
            };
          }}, TMP_20._s = self, TMP_20), $a).call($b)}else if ("disc"['$===']($case)) {($a = ($c = x).$each, $a._p = (TMP_21 = function(e){var self = TMP_21._s || this, $a, $b, i = nil;
          if (self.bounds == null) self.bounds = nil;
          if (self.cpt == null) self.cpt = nil;
          if (self.outside == null) self.outside = nil;
if (e == null) e = nil;
        i = self.$index(e);
          if (($a = (($b = (0)['$<='](i)) ? i['$<'](self.bounds.$length()) : $b)) !== false && $a !== nil) {
            return ($a = i, $b = self.cpt, $b['$[]=']($a, $b['$[]']($a)['$+'](1)))
            } else {
            if (i['$<'](0)) {
              ($a = 0, $b = self.outside, $b['$[]=']($a, $b['$[]']($a)['$+'](1)))};
            if (i['$>='](self.bounds.$length())) {
              return ($a = 1, $b = self.outside, $b['$[]=']($a, $b['$[]']($a)['$+'](1)))
              } else {
              return nil
            };
          };}, TMP_21._s = self, TMP_21), $a).call($c)};
        self.mean['$[]='](0, ($a = ($d = x).$inject, $a._p = (TMP_22 = function(e, e2){var self = TMP_22._s || this;if (e == null) e = nil;if (e2 == null) e2 = nil;
        return e = e['$+'](e2)}, TMP_22._s = self, TMP_22), $a).call($d, self.nbTot.$to_f()['$*'](self.mean['$[]'](0))));
        self.mean['$[]='](1, ($a = ($e = x).$inject, $a._p = (TMP_23 = function(e, e2){var self = TMP_23._s || this;if (e == null) e = nil;if (e2 == null) e2 = nil;
        return e = e['$+'](e2['$**'](2))}, TMP_23._s = self, TMP_23), $a).call($e, self.nbTot.$to_f()['$*'](self.mean['$[]'](1))));
        self.nbTot = self.nbTot['$+'](x.$length());
        self.mean['$[]='](0, self.mean['$[]'](0)['$/'](self.nbTot.$to_f()));
        self.mean['$[]='](1, self.mean['$[]'](1)['$/'](self.nbTot.$to_f()));
        return self.sd = Math.sqrt(self.mean['$[]'](1)['$-'](self.mean['$[]'](0)['$**'](2)));
      };

      def.$level = function(val, mode) {
        var $a, $b, self = this, level = nil;
        if (val == null) {
          val = 0
        }
        if (mode == null) {
          mode = "inc"
        }
        if (self.type['$==']("disc")) {
          return nil};
        if (($a = (($b = mode['$==']("inc")) ? val['$=='](0) : $b)) !== false && $a !== nil) {
          return self.levelNext};
        level = ((function() {if (mode['$==']("inc")) {
          return self.levelNext
          } else {
          return 0
        }; return nil; })())['$+'](val);
        if (level['$<'](0)) {
          level = 0};
        if (level['$>'](self.levels)) {
          level = self.levels};
        self.levelNext = level;
        self.$acceptLevelNext();
        return self.levelNext;
      };

      def.$acceptLevelNext = function() {
        var $a, self = this;
        if (($a = cqls.i.allowLevelChange) !== false && $a !== nil) {
          return self.level = self.levelNext
          } else {
          return nil
        };
      };

      def.$counts = function() {
        var $a, $b, TMP_24, self = this, cptLevel = nil;
        if (self.type['$==']("disc")) {
          return self.cpt.$dup()};
        cptLevel = [0]['$*'](((2)['$**'](self.level)));
        ($a = ($b = ($range(0, self.nbPart, true))).$each, $a._p = (TMP_24 = function(i){var self = TMP_24._s || this, $a, $b;
          if (self.levels == null) self.levels = nil;
          if (self.level == null) self.level = nil;
          if (self.cpt == null) self.cpt = nil;
if (i == null) i = nil;
        return ($a = i['$/']((2)['$**']((self.levels['$-'](self.level)))), $b = cptLevel, $b['$[]=']($a, $b['$[]']($a)['$+'](self.cpt['$[]'](i))))}, TMP_24._s = self, TMP_24), $a).call($b);
        return cptLevel;
      };

      def.$prob = function() {
        var $a, $b, TMP_25, self = this;
        return ($a = ($b = self.$counts()).$map, $a._p = (TMP_25 = function(e){var self = TMP_25._s || this;
          if (self.nbTot == null) self.nbTot = nil;
if (e == null) e = nil;
        return e.$to_f()['$/'](self.nbTot.$to_f())}, TMP_25._s = self, TMP_25), $a).call($b);
      };

      def.$density = function(nbTot) {
        var $a, $b, TMP_26, self = this, cpt = nil, step = nil, nbTotal = nil;
        if (nbTot == null) {
          nbTot = nil
        }
        cpt = self.$counts();
        step = ((function() {if (self.type['$==']("cont")) {
          return self.step['$*'](((2)['$**']((self.levels['$-'](self.level)))))
          } else {
          return self.step
        }; return nil; })());
        nbTotal = (function() {if (nbTot !== false && nbTot !== nil) {
          return nbTot
          } else {
          return self.nbTot
        }; return nil; })();
        return ($a = ($b = cpt).$map, $a._p = (TMP_26 = function(e){var self = TMP_26._s || this;if (e == null) e = nil;
        return e.$to_f()['$/'](nbTotal.$to_f())['$/'](step)}, TMP_26._s = self, TMP_26), $a).call($b);
      };

      def.$partBounds = function() {
        var $a, $b, TMP_27, $c, TMP_28, self = this, $case = nil, step = nil, s = nil;
        return (function() {$case = self.type;if ("cont"['$===']($case)) {step = self.step['$*'](((2)['$**']((self.levels['$-'](self.level)))));
        return (($a = ($b = ($range(0, ((2)['$**'](self.level)), true))).$map, $a._p = (TMP_27 = function(i){var self = TMP_27._s || this;
          if (self.bounds == null) self.bounds = nil;
if (i == null) i = nil;
        return self.bounds['$[]'](0)['$+'](i['$*'](step))}, TMP_27._s = self, TMP_27), $a).call($b))['$+']([self.bounds['$[]'](1)]);}else if ("disc"['$===']($case)) {s = self.step['$/'](2.0);
        return (($a = ($c = self.bounds).$map, $a._p = (TMP_28 = function(v){var self = TMP_28._s || this;if (v == null) v = nil;
        return v['$-'](s)}, TMP_28._s = self, TMP_28), $a).call($c))['$+']([self.bounds['$[]'](-1)['$+'](s)]);}else { return nil }})();
      };

      def.$draw = function(nbTot) {
        var $a, $b, TMP_29, self = this, d = nil, b = nil, l = nil;
        if (nbTot == null) {
          nbTot = nil
        }
        d = self.$density(nbTot);
        b = self.$partBounds();
        l = (function() {if (self.type['$==']("cont")) {
          return (2)['$**'](self.level)
          } else {
          return self.bounds.$length()
        }; return nil; })();
        self.shape.graphics.c().f(self.style['$[]']("hist")['$[]']("fill")).s(self.style['$[]']("hist")['$[]']("stroke")).mt(self.graph.$to_X(b['$[]'](0)),self.graph.$to_Y(0.0));
        ($a = ($b = ($range(0, (l), true))).$each, $a._p = (TMP_29 = function(i){var self = TMP_29._s || this;
          if (self.type == null) self.type = nil;
          if (self.shape == null) self.shape = nil;
          if (self.graph == null) self.graph = nil;
          if (self.step == null) self.step = nil;
if (i == null) i = nil;
        
					if(self.type['$==']("disc")) {
						self.shape.graphics.lt(self.graph.$to_X(b['$[]'](i)),self.graph.$to_Y(0));
					}
					self.shape.graphics.lt(self.graph.$to_X(b['$[]'](i)),self.graph.$to_Y(d['$[]'](i)));
					if(self['$regular?']()) {
						self.shape.graphics.lt(self.graph.$to_X(b['$[]'](i['$+'](1))),self.graph.$to_Y(d['$[]'](i)));
						if(self.type['$==']("disc")) {
							self.shape.graphics.lt(self.graph.$to_X(b['$[]'](i['$+'](1))),self.graph.$to_Y(0));
						}
					}
					else {//then implicitly discrete
						self.shape.graphics.lt(self.graph.$to_X(b['$[]'](i)['$+'](self.step)),self.graph.$to_Y(d['$[]'](i)));
						self.shape.graphics.lt(self.graph.$to_X(b['$[]'](i)['$+'](self.step)),self.graph.$to_Y(0));
					}			
				;}, TMP_29._s = self, TMP_29), $a).call($b);
        self.shape.graphics.lt(self.graph.$to_X(b['$[]'](-1)),self.graph.$to_Y(0.0));
        return self.shape.graphics.cp();
      };

      return (def.$updateHistAEP = function(x) {
        var $a, $b, TMP_30, $c, TMP_31, self = this, $case = nil;
        self.aep['$[]=']("cpt", self.$counts());
        self.aep['$[]=']("step", (function() {if (self.type['$==']("cont")) {
          return (self.bounds['$[]'](1)['$-'](self.bounds['$[]'](0))).$to_f()['$/']((2)['$**'](self.level).$to_f())
          } else {
          return self.step
        }; return nil; })());
        self.aep['$[]=']("nbTot", self.nbTot['$+'](x.$length()));
        $a = [[], []], self.aep['$[]=']("xRect", $a[0]), self.aep['$[]=']("yRect", $a[1]);
        return (function() {$case = self.type;if ("cont"['$===']($case)) {return ($a = ($b = x).$each_with_index, $a._p = (TMP_30 = function(e, i){var self = TMP_30._s || this, $a, $b, pos = nil;
          if (self.bounds == null) self.bounds = nil;
          if (self.aep == null) self.aep = nil;
if (e == null) e = nil;if (i == null) i = nil;
        if (($a = (($b = self.bounds['$[]'](0)['$<='](e)) ? e['$<='](self.bounds['$[]'](-1)) : $b)) !== false && $a !== nil) {
            pos = ((e['$-'](self.bounds['$[]'](0)))['$/']((self.aep['$[]']("step")))).$floor();
            self.aep['$[]']("xRect")['$[]='](i, self.bounds['$[]'](0)['$+']((self.aep['$[]']("step")['$*'](pos.$to_f()))));
            ($a = pos, $b = self.aep['$[]']("cpt"), $b['$[]=']($a, $b['$[]']($a)['$+'](1)));
            return self.aep['$[]']("yRect")['$[]='](i, self.aep['$[]']("cpt")['$[]'](pos).$to_f()['$/'](self.aep['$[]']("nbTot").$to_f())['$/'](self.aep['$[]']("step")));
            } else {
            pos = ((e['$-'](self.bounds['$[]'](0)))['$/']((self.aep['$[]']("step")))).$floor();
            self.aep['$[]']("xRect")['$[]='](i, self.bounds['$[]'](0)['$+']((self.aep['$[]']("step")['$*'](pos.$to_f()))));
            return self.aep['$[]']("yRect")['$[]='](i, 0);
          }}, TMP_30._s = self, TMP_30), $a).call($b)}else if ("disc"['$===']($case)) {return ($a = ($c = x).$each_with_index, $a._p = (TMP_31 = function(e, i){var self = TMP_31._s || this, $a, $b, pos = nil;
          if (self.bounds == null) self.bounds = nil;
          if (self.aep == null) self.aep = nil;
if (e == null) e = nil;if (i == null) i = nil;
        pos = self.$index(e);
          if (($a = (($b = (0)['$<='](pos)) ? pos['$<'](self.bounds.$length()) : $b)) !== false && $a !== nil) {
            self.aep['$[]']("xRect")['$[]='](i, self.bounds['$[]'](pos)['$-'](self.aep['$[]']("step")['$/'](2.0)));
            ($a = pos, $b = self.aep['$[]']("cpt"), $b['$[]=']($a, $b['$[]']($a)['$+'](1)));
            return self.aep['$[]']("yRect")['$[]='](i, self.aep['$[]']("cpt")['$[]'](pos).$to_f()['$/'](self.aep['$[]']("nbTot").$to_f())['$/'](self.aep['$[]']("step")));
            } else {
            self.aep['$[]']("xRect")['$[]='](i, e['$-'](self.aep['$[]']("step")['$/'](2.0)));
            return self.aep['$[]']("yRect")['$[]='](i, 0);
          };}, TMP_31._s = self, TMP_31), $a).call($c)}else { return nil }})();
      }, nil);
    })(self, $scope.Child);

    (function($base, $super) {
      function $Play(){};
      var self = $Play = $klass($base, $super, 'Play', $Play);

      var def = $Play._proto, $scope = $Play._scope;
      def.plotExp = def.plotHist = def.graphHist = def.graphExp = def.exp = def.hist = def.transf = def.checkTCL = def.expCur = def.stage = def.x = def.y = def.mLevel = def.mLevels = def.n = def.nold = def.transfList = def.curIndHist = def.histCur = def.ind = def.aep = def.w = def.h = def.wX = def.hY = def.time = def.nbSim = def.modeHidden = nil;
      self.$attr_accessor("exp");

      def.$initialize = function(plotExp, plotHist) {
        var $a, self = this;
        if (plotExp == null) {
          plotExp = cqls.s.plot
        }
        if (plotHist == null) {
          plotHist = cqls.h.plot
        }
        
				cqls.actors={pt:[],rect:[],line:[]};
				cqls.tweens={pt:[],rect:[],line:[]};
	    		cqls.m.nbsSimMax=cqls.m.nbsSim["1000"][cqls.m.nbsSim["1000"].length-1];
	    		//console.log("nbsSImMax="+cqls.m.nbsSimMax);
	     		for(i=0;i<cqls.m.nbsSimMax;i++) {
					var rect=new createjs.Shape();
	    			cqls.actors.rect.push(rect);
			    	rect.visible=false;
			    	cqls.m.stage.addChild(rect);
	    		}
	    		for(i=0;i<cqls.m.nbsSimMax;i++) {
					var line=new createjs.Shape();
	    			cqls.actors.line.push(line);
			    	line.visible=false;
			    	cqls.m.stage.addChild(line);
	    		}
	    		for(i=0;i<cqls.m.nbsSimMax;i++) {
	    			var pt=new createjs.Shape();
	    			cqls.actors.pt.push(pt);
			    	pt.visible=false;
			    	pt.x=0;pt.y=0;
			    	cqls.m.stage.addChild(pt);
	    		}
			
        self.stage = cqls.m.stage;
        $a = [plotExp, plotHist], self.plotExp = $a[0], self.plotHist = $a[1];
        $a = [self.plotExp.$graph(), self.plotHist.$graph()], self.graphExp = $a[0], self.graphHist = $a[1];
        self.graphHist.$syncTo(self.graphExp);
        self.exp = [$scope.Curve.$new(), $scope.Curve.$new()];
        self.$setDistrib();
        self.$setDistrib("chi2", [10], 1);
        self.plotExp.$addChild(self.exp['$[]'](0));
        self.plotExp.$addChild(self.exp['$[]'](1));
        self.exp['$[]'](1).$style()['$[]=']("fill", createjs.Graphics.getRGB(200,200,200,.3));
        self.exp['$[]'](1).$style()['$[]=']("thickness", 1);
        self.hist = [$scope.Hist.$new(), $scope.Hist.$new()];
        self.plotHist.$addChild(self.hist['$[]'](0));
        self.plotHist.$addChild(self.hist['$[]'](1));
        self.hist['$[]'](0).$attachCurve(self.exp['$[]'](0));
        self.hist['$[]'](1).$attachCurve(self.exp['$[]'](1));
        self.exp['$[]'](0).$attachSummary();
        self.exp['$[]'](1).$attachSummary();
        self.hist['$[]'](0).$attachSummary();
        self.hist['$[]'](1).$attachSummary();
        self.exp['$[]'](0).$attachExpAxis(0.3);
        self.exp['$[]'](1).$attachExpAxis(0.1);
        self['$isModeHidden?']();
        self.$setTransf();
        self.$reset();
        $a = [[], []], self.x = $a[0], self.y = $a[1];
        self.aep = [];
        $a = [[], [], [], []], self.w = $a[0], self.h = $a[1], self.wX = $a[2], self.hY = $a[3];
        self.style = $hash2(["fp", "sp", "fl", "sl", "fr", "sr"], {"fp": "#FFF", "sp": "#000000", "fl": "#FFF", "sl": "#000000", "fr": "rgba(100,100,255,0.8)", "sr": "#000000"});
        self.$setMLevel(3, "set");
        return self.$setN(1);
      };

      def.$reset = function(curs) {
        var $a, $b, TMP_32, self = this;
        if (curs == null) {
          curs = [0]
        }
        if (($a = self.transf) !== false && $a !== nil) {
          curs['$<<'](1)};
        self.graphExp['$active=']((function() {if (($a = self.transf) !== false && $a !== nil) {
          return ["curve0", "curve1"]
          } else {
          return ["curve0"]
        }; return nil; })());
        self.graphExp.$update();
        self.plotExp.$update();
        ($a = ($b = curs).$each, $a._p = (TMP_32 = function(cur){var self = TMP_32._s || this;
          if (self.hist == null) self.hist = nil;
          if (self.exp == null) self.exp = nil;
if (cur == null) cur = nil;
        self.hist['$[]'](cur).$reset();
          self.exp['$[]'](cur).$draw();
          self.hist['$[]'](cur).$drawCurve();
          return self.hist['$[]'](cur).$draw();}, TMP_32._s = self, TMP_32), $a).call($b);
        self.plotHist.$update();
        self.$setCurHist((function() {if (($a = self.transf) !== false && $a !== nil) {
          return 1
          } else {
          return 0
        }; return nil; })());
        self.$setTCL();
        return self.$show();
      };

      def.$setTCL = function() {
        var $a, self = this;
        if (($a = self.checkTCL) === false || $a === nil) {
          self.checkTCL = $scope.Curve.$new();
          self.checkTCL['$style=']($hash2(["close", "stroke", "fill", "thickness"], {"close": true, "stroke": "#000", "fill": "rgba(100,200,255,0.5)", "thickness": 5}));
          self.plotHist.$addChild(self.checkTCL, [self.checkTCL, "draw"]);};
        self.checkTCL.$setDistrib("normal", [self.expCur.$distrib().$mean(), Math.sqrt(self.expCur.$distrib().$variance())]);
        return self.$showTCL(false);
      };

      def.$showTCL = function(state) {
        var self = this;
        if (state == null) {
          state = true
        }
        
	    		self.checkTCL.shape.visible=state;
	    		self.stage.update
	    	;
      };

      def.$setDistrib = function(name, params, cur) {
        var $a, $b, self = this, $case = nil;
        if (name == null) {
          name = "normal"
        }
        if (params == null) {
          params = nil
        }
        if (cur == null) {
          cur = 0
        }
        $case = name;if ("discreteUniform"['$===']($case)) {if (($a = params) === false || $a === nil) {
          params = [1, 6, 1]}}else if ("bernoulli"['$===']($case)) {if (($a = params) === false || $a === nil) {
          params = [0.15]}}else if ("binomial"['$===']($case)) {if (($a = params) === false || $a === nil) {
          params = [5, 0.15]}}else if ("birthday"['$===']($case)) {if (($a = params) === false || $a === nil) {
          params = [365, 50]}}else if ("uniform"['$===']($case)) {if (($a = params) === false || $a === nil) {
          params = [0, 1]}}else if ("stdNormal"['$===']($case)) {name = "normal";
        if (($a = params) === false || $a === nil) {
          params = [0, 1]};}else if ("normal"['$===']($case)) {if (($a = params) === false || $a === nil) {
          params = [2, 0.5]}}else if ("t"['$===']($case)) {if (($a = params) === false || $a === nil) {
          params = [10]}}else if ("chi2"['$===']($case)) {if (($a = params) === false || $a === nil) {
          params = [10]}}else if ("cauchy"['$===']($case)) {if (($a = params) === false || $a === nil) {
          params = [0, 1]}};
        self.exp['$[]'](cur).$setDistrib(name, params);
        if (($a = ($b = self.transf, $b !== false && $b !== nil ?cur['$=='](0) : $b)) !== false && $a !== nil) {
          return self.$setTransf(self.transf['$[]']("name"))
          } else {
          return nil
        };
      };

      def.$setDistribAs = function(dist, cur) {
        var self = this;
        if (cur == null) {
          cur = 0
        }
        return self.exp['$[]'](cur).$setDistribAs(dist);
      };

      def.$setTransfDistrib = function(dist, transf, cur) {
        var self = this;
        if (cur == null) {
          cur = 0
        }
        return self.exp['$[]'](cur).$setDistribAsTransf(transf, dist);
      };

      def.$addXY = function(n, cur) {
        var $a, self = this, xy = nil;
        if (n == null) {
          n = 1
        }
        if (cur == null) {
          cur = 0
        }
        xy = self.exp['$[]'](cur).$xy(n);
        return $a = [xy['$[]']("x"), xy['$[]']("y")], self.x['$[]='](cur, $a[0]), self.y['$[]='](cur, $a[1]);
      };

      def.$setN = function(n) {
        var $a, self = this;
        self.n = n;
        if (($a = self.transf) !== false && $a !== nil) {
          self.$setTransf(self.transf['$[]']("name"))};
        return self.$setNbSim();
      };

      def.$setMLevel = function(val, mode) {
        var $a, $b, self = this;
        if (val == null) {
          val = 3
        }
        if (mode == null) {
          mode = "inc"
        }
        if (($a = (($b = mode['$==']("inc")) ? val['$=='](0) : $b)) !== false && $a !== nil) {
          return self.mLevel};
        if (($a = self.mLevels) === false || $a === nil) {
          self.mLevels = [1, 3, 5, 10, 30, 100, 1000, 3000]};
        self.mLevel = ((function() {if (mode['$==']("inc")) {
          return self.mLevel
          } else {
          return 0
        }; return nil; })())['$+'](val);
        if (self.mLevel['$<'](0)) {
          self.mLevel = 0};
        if (self.mLevel['$>'](self.mLevels.$length()['$-'](1))) {
          self.mLevel = self.mLevels.$length()['$-'](1)};
        return self.$setNbSim();
      };

      def.$setNbSim = function() {
        var self = this;
        return self.nbSim = [self.n['$*'](self.mLevels['$[]'](self.mLevel)), cqls.m.nbSimMax].$min();
      };

      def.$setTransf = function(transf) {
        var $a, self = this, dist0 = nil, $case = nil, name = nil, params = nil;
        if (transf == null) {
          transf = nil
        }
        self.transf = transf;
        if (self.transf['$==']("none")) {
          self.transf = nil};
        if (($a = self.transf) !== false && $a !== nil) {
          if (self.n['$=='](1)) {
            if (($a = self.nold) === false || $a === nil) {
              self.nold = 10};
            self.n = self.nold;
            self.$setNbSim();};
          if (($a = self.transfList) === false || $a === nil) {
            self.$initTransfList()};
          self.transf = self.transfList['$[]'](transf);
          self.transf['$[]=']("name", transf);
          self.transf['$[]=']("origDist", dist0 = self.exp['$[]'](0).$distrib());
          return (function() {$case = self.transf['$[]']("name");if ("sum"['$===']($case)) {self.transf['$[]=']("args", [self.n]);
          if (self.exp['$[]'](0).$distrib().$name()['$==']("bernoulli")) {
            self.transf['$[]=']("dist", "exact");
            return self.$setDistrib("binomial", [self.n, dist0.$mean()], 1);
          } else if (self.exp['$[]'](0).$distrib().$name()['$==']("normal")) {
            self.transf['$[]=']("dist", "exact");
            return self.$setDistrib(name = "normal", params = [self.n['$*'](dist0.$mean()), Math.sqrt(dist0.$variance()['$*'](self.n))], 1);
          } else if (dist0.$type()['$==']("disc")) {
            self.transf['$[]=']("dist", "exact");
            return self.$setTransfDistrib(dist0, self.transf, 1);
          } else if (self.n['$>='](30)) {
            self.transf['$[]=']("dist", "approx");
            return self.$setDistrib(name = "normal", params = [self.n['$*'](dist0.$mean()), Math.sqrt(dist0.$variance()['$*'](self.n))], 1);
            } else {
            self.transf['$[]=']("dist", "xylim");
            return self.$setTransfDistrib(dist0, self.transf, 1);
          };}else if ("mean"['$===']($case)) {self.transf['$[]=']("args", [self.n]);
          if (self.exp['$[]'](0).$distrib().$name()['$==']("bernoulli")) {
            self.transf['$[]=']("dist", "exact");
            return self.$setDistribAs($scope.Distribution.$new("binomial", [self.n, dist0.$mean()], $hash2(["name", "args"], {"name": "locationScale", "args": [0, (1)['$/'](self.n)]})), 1);
          } else if (self.exp['$[]'](0).$distrib().$name()['$==']("normal")) {
            self.transf['$[]=']("dist", "exact");
            return self.$setDistrib(name = "normal", params = [dist0.$mean(), Math.sqrt(dist0.$variance()['$/'](self.n))], 1);
          } else if (self.exp['$[]'](0).$distrib().$name()['$==']("cauchy")) {
            self.transf['$[]=']("dist", "exact2");
            return self.$setDistrib(name = "cauchy", params = [0, 1], 1);
          } else if (dist0.$type()['$==']("disc")) {
            self.transf['$[]=']("dist", "exact");
            return self.$setTransfDistrib(dist0, self.transf, 1);
          } else if (self.n['$>='](30)) {
            self.transf['$[]=']("dist", "approx");
            return self.$setDistrib(name = "normal", params = [dist0.$mean(), Math.sqrt(dist0.$variance()['$/'](self.n))], 1);
            } else {
            self.transf['$[]=']("dist", "xylim");
            return self.$setTransfDistrib(dist0, self.transf, 1);
          };}else if ("stdMean"['$===']($case)) {self.transf['$[]=']("args", [dist0.$mean()]);
          if (self.exp['$[]'](0).$distrib().$name()['$==']("normal")) {
            self.transf['$[]=']("dist", "exact");
            return self.$setDistrib(name = "t", params = [self.n['$-'](1)], 1);
          } else if (self.n['$>='](30)) {
            self.transf['$[]=']("dist", "approx");
            return self.$setDistrib(name = "normal", params = [0, 1], 1);
            } else {
            self.transf['$[]=']("dist", "xylim");
            return self.$setDistrib(name = "normal", params = [0, 1], 1);
          };}else if ("sumOfSq"['$===']($case)) {self.transf['$[]=']("args", [self.n]);
          self.transf['$[]=']("dist", "exact2");
          if (self.exp['$[]'](0).$distrib().$name()['$==']("normal")) {
            return self.$setDistrib("chi2", [self.n], 1)
            } else {
            return self.$setTransfDistrib(dist0, self.transf, 1)
          };}else if ("locationScale"['$===']($case)) {$a = [self.n, 1], self.nold = $a[0], self.n = $a[1];
          self.transf['$[]=']("dist", "exact");
          self.transf['$[]=']("args", [dist0.$mean()['$-@']()['$/'](Math.sqrt(dist0.$variance())), (1)['$/'](Math.sqrt(dist0.$variance()))]);
          return self.$setTransfDistrib(dist0, self.transf, 1);}else if ("square"['$===']($case)) {$a = [self.n, 1], self.nold = $a[0], self.n = $a[1];
          self.transf['$[]=']("dist", "exact");
          self.transf['$[]=']("args", []);
          return self.$setTransfDistrib(dist0, self.transf, 1);}else if ("center"['$===']($case)) {$a = [self.n, 1], self.nold = $a[0], self.n = $a[1];
          self.transf['$[]=']("dist", "exact");
          self.transf['$[]=']("transf", "locationScale");
          self.transf['$[]=']("args", [dist0.$mean()['$-@'](), 1]);
          return self.$setTransfDistrib(dist0, $hash2(["name", "args"], {"name": self.transf['$[]']("transf"), "args": self.transf['$[]']("args")}), 1);}else { return nil }})();
          } else {
          self.nold = self.n;
          return self.n = 1;
        };
      };

      def.$transfMode = function() {
        var $a, self = this;
        if (($a = self.transf) !== false && $a !== nil) {
          return self.transf['$[]']("mode")
          } else {
          return "none"
        };
      };

      def.$initTransfList = function() {
        var self = this;
        return self.transfList = $hash2(["sum", "mean", "stdMean", "sumOfSq", "locationScale", "square", "addition", "center"], {"sum": $hash2(["args", "mode"], {"args": [], "mode": "sample"}), "mean": $hash2(["args", "mode"], {"args": [], "mode": "sample"}), "stdMean": $hash2(["args", "mode"], {"args": [], "mode": "sample"}), "sumOfSq": $hash2(["args", "mode"], {"args": [], "mode": "sample"}), "locationScale": $hash2(["args", "mode"], {"args": [], "mode": "all"}), "square": $hash2(["args", "mode"], {"args": [], "mode": "all"}), "addition": $hash2(["args", "mode"], {"args": [], "mode": "all"}), "center": $hash2(["args", "mode"], {"args": [], "mode": "all"})});
      };

      def.$applyTransfByValue = function(v) {
        var $a, $b, self = this;
        return ($a = self.$method((((($b = self.transf['$[]']("transf")) !== false && $b !== nil) ? $b : self.transf['$[]']("name")))['$+']("_transf"))).$call.apply($a, [v].concat(self.transf['$[]']("args")));
      };

      def.$applyTransfByIndex = function(inds, v) {
        var $a, $b, self = this;
        return ($a = self.$method((((($b = self.transf['$[]']("transf")) !== false && $b !== nil) ? $b : self.transf['$[]']("name")))['$+']("_transf_by_index"))).$call.apply($a, [inds, v].concat(self.transf['$[]']("args")));
      };

      def.$sum_transf = function(v) {
        var $a, $b, TMP_33, self = this;
        return ($a = ($b = v).$inject, $a._p = (TMP_33 = function(e, v2){var self = TMP_33._s || this;if (e == null) e = nil;if (v2 == null) v2 = nil;
        return e = e['$+'](v2)}, TMP_33._s = self, TMP_33), $a).call($b, 0);
      };

      def.$sum_transf_by_index = function(inds, v) {
        var $a, $b, TMP_34, self = this;
        return ($a = ($b = inds).$inject, $a._p = (TMP_34 = function(e, i){var self = TMP_34._s || this;if (e == null) e = nil;if (i == null) i = nil;
        return e = e['$+'](v['$[]'](i))}, TMP_34._s = self, TMP_34), $a).call($b, 0);
      };

      def.$mean_transf = function(v) {
        var $a, $b, TMP_35, self = this;
        return (($a = ($b = v).$inject, $a._p = (TMP_35 = function(e, v2){var self = TMP_35._s || this;if (e == null) e = nil;if (v2 == null) v2 = nil;
        return e = e['$+'](v2)}, TMP_35._s = self, TMP_35), $a).call($b, 0))['$/'](self.n);
      };

      def.$mean_transf_by_index = function(inds, v) {
        var $a, $b, TMP_36, self = this;
        return (($a = ($b = inds).$inject, $a._p = (TMP_36 = function(e, i){var self = TMP_36._s || this;if (e == null) e = nil;if (i == null) i = nil;
        return e = e['$+'](v['$[]'](i))}, TMP_36._s = self, TMP_36), $a).call($b, 0))['$/'](self.n);
      };

      def.$stdMean_transf = function(v, mu) {
        var $a, $b, TMP_37, $c, TMP_38, self = this, m = nil, m2 = nil;
        m = (($a = ($b = v).$inject, $a._p = (TMP_37 = function(e, v2){var self = TMP_37._s || this;if (e == null) e = nil;if (v2 == null) v2 = nil;
        return e = e['$+'](v2)}, TMP_37._s = self, TMP_37), $a).call($b, 0))['$/'](self.n);
        m2 = ($a = ($c = v).$inject, $a._p = (TMP_38 = function(e, v2){var self = TMP_38._s || this;if (e == null) e = nil;if (v2 == null) v2 = nil;
        return e = e['$+'](v2['$**'](2))}, TMP_38._s = self, TMP_38), $a).call($c, 0)['$/'](self.n);
        return (m['$-'](mu))['$/'](Math.sqrt((m2['$-'](m['$**'](2)))/self.n['$-'](1)));
      };

      def.$stdMean_transf_by_index = function(inds, v, mu) {
        var $a, $b, TMP_39, $c, TMP_40, self = this, m = nil, m2 = nil;
        m = (($a = ($b = inds).$inject, $a._p = (TMP_39 = function(e, i){var self = TMP_39._s || this;if (e == null) e = nil;if (i == null) i = nil;
        return e = e['$+'](v['$[]'](i))}, TMP_39._s = self, TMP_39), $a).call($b, 0))['$/'](self.n);
        m2 = ($a = ($c = inds).$inject, $a._p = (TMP_40 = function(e, i){var self = TMP_40._s || this;if (e == null) e = nil;if (i == null) i = nil;
        return e = e['$+'](v['$[]'](i)['$**'](2))}, TMP_40._s = self, TMP_40), $a).call($c, 0)['$/'](self.n);
        return (m['$-'](mu))['$/'](Math.sqrt((m2['$-'](m['$**'](2)))/self.n['$-'](1)));
      };

      def.$sumOfSq_transf = function(v) {
        var $a, $b, TMP_41, self = this, m = nil, s = nil;
        $a = [self.transf['$[]']("origDist").$mean(), self.transf['$[]']("origDist").$stdDev()], m = $a[0], s = $a[1];
        return ($a = ($b = v).$inject, $a._p = (TMP_41 = function(e, v2){var self = TMP_41._s || this;if (e == null) e = nil;if (v2 == null) v2 = nil;
        return e = e['$+'](((v2['$-'](m))['$/'](s))['$**'](2))}, TMP_41._s = self, TMP_41), $a).call($b, 0);
      };

      def.$sumOfSq_transf_by_index = function(inds, v) {
        var $a, $b, TMP_42, self = this, m = nil, s = nil;
        $a = [self.transf['$[]']("origDist").$mean(), self.transf['$[]']("origDist").$stdDev()], m = $a[0], s = $a[1];
        return ($a = ($b = inds).$inject, $a._p = (TMP_42 = function(e, i){var self = TMP_42._s || this;if (e == null) e = nil;if (i == null) i = nil;
        return e = e['$+'](((v['$[]'](i)['$-'](m))['$/'](s))['$**'](2))}, TMP_42._s = self, TMP_42), $a).call($b, 0);
      };

      def.$locationScale_transf = function(v) {
        var $a, $b, TMP_43, self = this;
        return ($a = ($b = v).$map, $a._p = (TMP_43 = function(e){var self = TMP_43._s || this;
          if (self.transf == null) self.transf = nil;
if (e == null) e = nil;
        return self.transf['$[]']("args")['$[]'](0)['$+'](e['$*'](self.transf['$[]']("args")['$[]'](1)))}, TMP_43._s = self, TMP_43), $a).call($b);
      };

      def.$locationScale_transf_by_index = function(inds, v) {
        var $a, $b, TMP_44, self = this;
        return ($a = ($b = inds).$map, $a._p = (TMP_44 = function(i){var self = TMP_44._s || this;
          if (self.transf == null) self.transf = nil;
if (i == null) i = nil;
        return self.transf['$[]']("args")['$[]'](0)['$+'](v['$[]'](i)['$*'](self.transf['$[]']("args")['$[]'](1)))}, TMP_44._s = self, TMP_44), $a).call($b);
      };

      def.$square_transf = function(v) {
        var $a, $b, TMP_45, self = this;
        return ($a = ($b = v).$map, $a._p = (TMP_45 = function(e){var self = TMP_45._s || this;if (e == null) e = nil;
        return e['$**'](2)}, TMP_45._s = self, TMP_45), $a).call($b);
      };

      def.$square_transf_by_index = function(inds, v) {
        var $a, $b, TMP_46, self = this;
        return ($a = ($b = inds).$map, $a._p = (TMP_46 = function(i){var self = TMP_46._s || this;if (i == null) i = nil;
        return v['$[]'](i)['$**'](2)}, TMP_46._s = self, TMP_46), $a).call($b);
      };

      def.$setCurHist = function(ind) {
        var self = this;
        if (ind == null) {
          ind = 0
        }
        self.curIndHist = ind;
        self.histCur = self.hist['$[]'](self.curIndHist);
        return self.expCur = self.exp['$[]'](self.curIndHist);
      };

      def.$drawHist = function() {
        var self = this;
        return nil;
      };

      def.$allowLevelChange = function(state) {
        var self = this;
        cqls.i.allowLevelChange=state;
        if (state !== false && state !== nil) {
          return self.histCur.$acceptLevelNext()
          } else {
          return nil
        };
      };

      def.$transitionInitTransf = function(o, t) {
        var $a, $b, TMP_47, $c, TMP_48, $d, TMP_49, $e, TMP_50, $f, TMP_51, $g, TMP_52, $h, TMP_53, self = this, opdf = nil, tpdf = nil;
        if (o == null) {
          o = 0
        }
        if (t == null) {
          t = 1
        }
        if (self.$transfMode()['$==']("sample")) {
          self.ind = [];
          ($a = ($b = ($range(0, (self.x['$[]'](o).$length()['$/'](self.n)), true))).$each, $a._p = (TMP_47 = function(i){var self = TMP_47._s || this;
            if (self.ind == null) self.ind = nil;
if (i == null) i = nil;
          return self.ind['$<<']([])}, TMP_47._s = self, TMP_47), $a).call($b);
          ($a = ($c = ($range(0, self.x['$[]'](o).$length(), true))).$each, $a._p = (TMP_48 = function(i){var self = TMP_48._s || this;
            if (self.ind == null) self.ind = nil;
            if (self.n == null) self.n = nil;
if (i == null) i = nil;
          return self.ind['$[]']((i['$/'](self.n)).$floor())['$<<'](i)}, TMP_48._s = self, TMP_48), $a).call($c);
          self.x['$[]='](t, [0]['$*']((self.x['$[]'](o).$length()['$/'](self.n))));
          self.col = [];
          ($a = ($d = self.ind).$each_with_index, $a._p = (TMP_49 = function(s, i){var self = TMP_49._s || this;
            if (self.x == null) self.x = nil;
            if (self.col == null) self.col = nil;
if (s == null) s = nil;if (i == null) i = nil;
          self.x['$[]'](t)['$[]='](i, self.$applyTransfByIndex(s, self.x['$[]'](o)));
            return self.col['$[]='](i, [(Math.random()*256).$floor(), (Math.random()*256).$floor(), (Math.random()*256).$floor(), 0.8]);}, TMP_49._s = self, TMP_49), $a).call($d);
          return self.y['$[]='](t, self.exp['$[]'](t).$y(self.x['$[]'](t)));
        } else if (self.$transfMode()['$==']("all")) {
          self.ind = ($a = ($e = ($range(0, self.x['$[]'](o).$length(), true))).$map, $a._p = (TMP_50 = function(i){var self = TMP_50._s || this;if (i == null) i = nil;
          return [i]}, TMP_50._s = self, TMP_50), $a).call($e);
          self.x['$[]='](t, self.$applyTransfByValue(self.x['$[]'](o)));
          self.col = [[0, 0, 0, 1]]['$*']((self.x['$[]'](t).$length()));
          self.y['$[]='](t, self.exp['$[]'](t).$y(self.x['$[]'](t)));
          opdf = ($a = ($f = self.exp['$[]'](o).$distrib().$pdf(self.x['$[]'](o))).$map, $a._p = (TMP_51 = function(e){var self = TMP_51._s || this;
            if (self.exp == null) self.exp = nil;
if (e == null) e = nil;
          return e['$/'](self.exp['$[]'](o).$distrib().$step())}, TMP_51._s = self, TMP_51), $a).call($f);
          tpdf = ($a = ($g = self.exp['$[]'](t).$distrib().$pdf(self.x['$[]'](t))).$map, $a._p = (TMP_52 = function(e){var self = TMP_52._s || this;
            if (self.exp == null) self.exp = nil;
if (e == null) e = nil;
          return e['$/'](self.exp['$[]'](t).$distrib().$step())}, TMP_52._s = self, TMP_52), $a).call($g);
          return self.y['$[]='](t, ($a = ($h = ($range(0, self.x['$[]'](o).$length(), true))).$map, $a._p = (TMP_53 = function(i){var self = TMP_53._s || this;
            if (self.y == null) self.y = nil;
if (i == null) i = nil;
          return (self.y['$[]'](o)['$[]'](i))['$/'](opdf['$[]'](i))['$*'](tpdf['$[]'](i))}, TMP_53._s = self, TMP_53), $a).call($h));
          } else {
          return nil
        };
      };

      def.$transitionInitHist = function(cur) {
        var $a, self = this;
        self.$allowLevelChange(false);
        self.hist['$[]'](cur).$updateHistAEP(self.x['$[]'](cur));
        self.aep['$[]='](cur, self.hist['$[]'](cur).$aep());
        $a = [self.aep['$[]'](cur)['$[]']("step"), (1)['$/'](self.aep['$[]'](cur)['$[]']("nbTot").$to_f())['$/'](self.aep['$[]'](cur)['$[]']("step"))], self.w['$[]='](cur, $a[0]), self.h['$[]='](cur, $a[1]);
        return $a = [self.graphHist.$to_X(self.w['$[]'](cur))['$-'](self.graphHist.$to_X(0)), self.graphHist.$to_Y(0)['$-'](self.graphHist.$to_Y(self.h['$[]'](cur)))], self.wX['$[]='](cur, $a[0]), self.hY['$[]='](cur, $a[1]);
      };

      def.$transitionInitPts = function(cur) {
        var $a, $b, TMP_54, self = this;
        return ($a = ($b = ($range(0, self.x['$[]'](cur).$length(), true))).$each, $a._p = (TMP_54 = function(i){var self = TMP_54._s || this;
          if (self.style == null) self.style = nil;
          if (self.hist == null) self.hist = nil;
          if (self.wX == null) self.wX = nil;
if (i == null) i = nil;
        
					//draw points
					cqls.actors.pt[i].graphics.c().s(self.style['$[]']("sp")).f(self.style['$[]']("fp")).drawCircle(0,0,cqls.i.ptSize);
					//tweens for points
					cqls.tweens.pt[i]=createjs.Tween.get(cqls.actors.pt[i],{override:true});
				;
          if (self.hist['$[]'](cur).$type()['$==']("disc")) {
            
						//draw lines
						cqls.actors.line[i].graphics.c().s(self.style['$[]']("sl")).f(self.style['$[]']("fl"))
						.drawRect(0,0,self.wX['$[]'](cur),0);
						cqls.actors.line[i].regX=self.wX['$[]'](cur)/2.0;
						//tweens for lines
						cqls.tweens.line[i]=createjs.Tween.get(cqls.actors.line[i],{override:true});
					;
            } else {
            return nil
          };}, TMP_54._s = self, TMP_54), $a).call($b);
      };

      def.$transitionInitPtsTransf = function(cur) {
        var $a, $b, TMP_55, $c, TMP_57, self = this;
        if (($a = self.transf['$[]']("mode")['$==']("sample")) === false || $a === nil) {
          return nil};
        if (cur['$=='](0)) {
          return ($a = ($b = self.ind).$each_with_index, $a._p = (TMP_55 = function(s, i2){var self = TMP_55._s || this, $a, $b, TMP_56, col = nil;
            if (self.col == null) self.col = nil;
if (s == null) s = nil;if (i2 == null) i2 = nil;
          col = "rgba(" + (self.col['$[]'](i2)['$[]'](0)) + "," + (self.col['$[]'](i2)['$[]'](1)) + "," + (self.col['$[]'](i2)['$[]'](2)) + "," + (self.col['$[]'](i2)['$[]'](3)) + ")";
            return ($a = ($b = s).$each, $a._p = (TMP_56 = function(i){var self = TMP_56._s || this;
              if (self.style == null) self.style = nil;
              if (self.wX == null) self.wX = nil;
if (i == null) i = nil;
            
							cqls.actors.pt[i].graphics.c().s(self.style['$[]']("sp")).f(col).drawCircle(0,0,cqls.i.ptSize);
							cqls.actors.line[i].graphics.c().s(col).f(self.style['$[]']("fl")).drawRect(0,0,self.wX['$[]'](cur),2);
						;}, TMP_56._s = self, TMP_56), $a).call($b);}, TMP_55._s = self, TMP_55), $a).call($b)
          } else {
          return ($a = ($c = ($range(0, self.x['$[]'](cur).$length(), true))).$each_with_index, $a._p = (TMP_57 = function(i){var self = TMP_57._s || this, col = nil;
            if (self.col == null) self.col = nil;
            if (self.style == null) self.style = nil;
            if (self.hist == null) self.hist = nil;
            if (self.wX == null) self.wX = nil;
if (i == null) i = nil;
          col = "rgba(" + (self.col['$[]'](i)['$[]'](0)) + "," + (self.col['$[]'](i)['$[]'](1)) + "," + (self.col['$[]'](i)['$[]'](2)) + "," + (self.col['$[]'](i)['$[]'](3)) + ")";
            
						cqls.actors.pt[i].graphics.c().s(self.style['$[]']("sp")).f(col).drawCircle(0,0,cqls.i.ptSize);
					;
            if (self.hist['$[]'](cur).$type()['$==']("disc")) {
              
							//cqls.actors.line[i].graphics.c().s(col).f(self.style['$[]']("fl")).drawRect(0,0,self.wX['$[]'](cur),2);
							cqls.tweens.line[i].call(function(tween) {
					 			tween._target.graphics.c().s(col).f(self.style['$[]']("fl")).drawRect(0,0,self.wX['$[]'](cur),2);
					 		})
					;
              } else {
              return nil
            };}, TMP_57._s = self, TMP_57), $a).call($c)
        };
      };

      def.$transitionInitRects = function(cur) {
        var $a, $b, TMP_58, self = this;
        ($a = ($b = ($range(0, self.x['$[]'](cur).$length(), true))).$each, $a._p = (TMP_58 = function(i){var self = TMP_58._s || this;
          if (self.graphHist == null) self.graphHist = nil;
          if (self.aep == null) self.aep = nil;
          if (self.plotHist == null) self.plotHist = nil;
          if (self.hY == null) self.hY = nil;
          if (self.style == null) self.style = nil;
          if (self.wX == null) self.wX = nil;
if (i == null) i = nil;
        
					//draw rect first
					cqls.actors.rect[i].x=self.graphHist.$to_X(self.aep['$[]'](cur)['$[]']("xRect")['$[]'](i));cqls.actors.rect[i].y=self.plotHist.$dim()['$[]']("y");
					cqls.actors.rect[i].regY=self.hY['$[]'](cur)['$/'](2);
					cqls.actors.rect[i].graphics.c().f(self.style['$[]']("fr")).s(self.style['$[]']("sr")).drawRect(0,0,self.wX['$[]'](cur),self.hY['$[]'](cur));
					cqls.tweens.rect[i]=createjs.Tween.get(cqls.actors.rect[i],{override:true});
				;}, TMP_58._s = self, TMP_58), $a).call($b);
        return self.time = 0;
      };

      def.$transitionDrawPts = function(cur, wait) {
        var $a, $b, TMP_59, self = this;
        if (wait == null) {
          wait = 1000
        }
        ($a = ($b = ($range(0, self.x['$[]'](cur).$length(), true))).$each, $a._p = (TMP_59 = function(i){var self = TMP_59._s || this;
          if (self.graphExp == null) self.graphExp = nil;
          if (self.x == null) self.x = nil;
          if (self.y == null) self.y = nil;
          if (self.hist == null) self.hist = nil;
if (i == null) i = nil;
        
					cqls.tweens.pt[i].to({x:self.graphExp.$to_X(self.x['$[]'](cur)['$[]'](i)),y:self.graphExp.$to_Y(self.y['$[]'](cur)['$[]'](i))})
					.set({visible:true})
					.wait(wait)
				;
          if (self.hist['$[]'](cur).$type()['$==']("disc")) {
            
						cqls.tweens.line[i].to({x:self.graphExp.$to_X(self.x['$[]'](cur)['$[]'](i)),y:self.graphExp.$to_Y(self.y['$[]'](cur)['$[]'](i))})
						.set({visible:true})
						.wait(wait);
					;
            } else {
            return nil
          };}, TMP_59._s = self, TMP_59), $a).call($b);
        return self.time = self.time['$+'](wait);
      };

      def.$transitionPtsTransf = function(t, merge, wait) {
        var $a, $b, TMP_60, self = this;
        if (t == null) {
          t = 1
        }
        if (merge == null) {
          merge = 1500
        }
        if (wait == null) {
          wait = 500
        }
        ($a = ($b = self.ind).$each_with_index, $a._p = (TMP_60 = function(s, i2){var self = TMP_60._s || this, $a, $b, TMP_61, col = nil;
          if (self.col == null) self.col = nil;
if (s == null) s = nil;if (i2 == null) i2 = nil;
        col = "rgba(" + (self.col['$[]'](i2)['$[]'](0)) + "," + (self.col['$[]'](i2)['$[]'](1)) + "," + (self.col['$[]'](i2)['$[]'](2)) + "," + (self.col['$[]'](i2)['$[]'](3)) + ")";
          return ($a = ($b = s).$each, $a._p = (TMP_61 = function(i){var self = TMP_61._s || this, $a, $b;
            if (self.graphExp == null) self.graphExp = nil;
            if (self.x == null) self.x = nil;
            if (self.y == null) self.y = nil;
            if (self.transf == null) self.transf = nil;
            if (self.hist == null) self.hist = nil;
            if (self.wX == null) self.wX = nil;
            if (self.style == null) self.style = nil;
if (i == null) i = nil;
          
						cqls.tweens.pt[i].to({x:self.graphExp.$to_X(self.x['$[]'](t)['$[]'](i2)),y:self.graphExp.$to_Y(self.y['$[]'](t)['$[]'](i2))},merge)
						.wait(wait).set({visible:false})
						if(($a = ($b = self.transf, $b !== false && $b !== nil ?self.hist['$[]'](0).$type()['$==']("disc") : $b), $a !== false && $a !== nil ?self.hist['$[]'](1).$type()['$==']("disc") : $a)) {
					 		cqls.tweens.line[i].call(function(tween) {
					 			tween._target.regX=self.wX['$[]'](t)/2.0;
					 			tween._target.graphics.c().s(col).f(self.style['$[]']("fl")).drawRect(0,0,self.wX['$[]'](t),2);
					 		})
					 		.to({x:self.graphExp.$to_X(self.x['$[]'](t)['$[]'](i2)),y:self.graphExp.$to_Y(self.y['$[]'](t)['$[]'](i2))},merge)
							.wait(wait).set({visible:false})
					 		//cqls.tweens.line[i].wait(wait['$+'](merge)).set({visible:false});
						}
					;}, TMP_61._s = self, TMP_61), $a).call($b);}, TMP_60._s = self, TMP_60), $a).call($b);
        return self.time = self.time['$+'](merge['$+'](wait));
      };

      def.$transitionFallPts = function(cur, fall, wait) {
        var $a, $b, TMP_62, self = this;
        if (fall == null) {
          fall = 2000
        }
        if (wait == null) {
          wait = 1000
        }
        ($a = ($b = ($range(0, self.x['$[]'](cur).$length(), true))).$each, $a._p = (TMP_62 = function(i){var self = TMP_62._s || this;
          if (self.plotHist == null) self.plotHist = nil;
          if (self.hist == null) self.hist = nil;
if (i == null) i = nil;
        
					cqls.tweens.pt[i].to({y:self.plotHist.$dim()['$[]']("y")},fall,createjs.Ease.bounceOut)
					.wait(wait)
				;
          if (self.hist['$[]'](cur).$type()['$==']("disc")) {
            
						cqls.tweens.line[i].to({y:self.plotHist.$dim()['$[]']("y")},fall,createjs.Ease.bounceOut)
						.wait(wait).set({visible:false});
					;
            } else {
            return nil
          };}, TMP_62._s = self, TMP_62), $a).call($b);
        return self.time = self.time['$+'](fall['$+'](wait));
      };

      def.$transitionHistPtsAndRects = function(cur, from, before, fall, after) {
        var $a, $b, TMP_63, self = this;
        if (from == null) {
          from = self.time
        }
        if (before == null) {
          before = 2000
        }
        if (fall == null) {
          fall = 1000
        }
        if (after == null) {
          after = 1000
        }
        fall = fall['$+'](self.x['$[]'](cur).$length());
        ($a = ($b = ($range(0, self.x['$[]'](cur).$length(), true))).$each, $a._p = (TMP_63 = function(i){var self = TMP_63._s || this;
          if (self.graphHist == null) self.graphHist = nil;
          if (self.aep == null) self.aep = nil;
          if (self.hY == null) self.hY = nil;
          if (self.hist == null) self.hist = nil;
if (i == null) i = nil;
        
					cqls.tweens.pt[i].wait(before+i)
					.to({y:self.graphHist.$to_Y(self.aep['$[]'](cur)['$[]']("yRect")['$[]'](i))+self.hY['$[]'](cur)/2.0},fall-i)
					.wait(1000);

					//rect start here so wait "from" ms first
					cqls.tweens.rect[i].set({visible:false})
					.wait(from).set({visible:true})
					if(i==0) {
						cqls.tweens.rect[i].call(function(tween) {
							self.hist['$[]'](cur).$draw(self.aep['$[]'](cur)['$[]']("nbTot"));
							self.$allowLevelChange(true);
						})
					}
					cqls.tweens.rect[i].wait(before+i)
					.to({y:self.graphHist.$to_Y(self.aep['$[]'](cur)['$[]']("yRect")['$[]'](i))+self.hY['$[]'](cur)/2.0},fall-i)
					.wait(after);

				;}, TMP_63._s = self, TMP_63), $a).call($b);
        
				//only once
				cqls.tweens.pt[0].call(function(tween) {
						self.$hideAll(cur)
        self.hist['$[]'](cur).$add(self.x['$[]'](cur))
        self.hist['$[]'](cur).$draw()
        self.$drawSummary(cur);
				})
			;
        return self.time = self.time['$+'](before['$+'](fall)['$+'](after));
      };

      def.$hideAll = function(cur) {
        var $a, self = this;
        if (($a = self.x['$[]'](cur)) !== false && $a !== nil) {
          
					for(i=0;i<cqls.m.nbsSimMax;i++) {
						cqls.actors.pt[i].visible=false;
						cqls.actors.line[i].visible=false;
						cqls.actors.rect[i].visible=false;	
					}
				
          } else {
          return nil
        };
      };

      def.$show = function() {
        var $a, self = this, isTransf = nil, isSample = nil;
        isTransf = (function() {if (($a = self.transf) !== false && $a !== nil) {
          return true
          } else {
          return false
        }; return nil; })();
        isSample = (($a = isTransf !== false && isTransf !== nil) ? self.$transfMode()['$==']("sample") : $a);
        
				self.exp['$[]'](0).shape.visible=cqls.enyo.app.$.checkExp0Curve.getValue();
				self.exp['$[]'](1).shape.visible=isTransf & cqls.enyo.app.$.checkExp1Curve.getValue();
				self.hist['$[]'](0).shape.visible=($a = isTransf, ($a === nil || $a === false));
				self.hist['$[]'](1).shape.visible=isTransf;
				self.hist['$[]'](0).curveShape.visible=($a = isTransf, ($a === nil || $a === false)) & cqls.enyo.app.$.checkHistCurve.getValue();
				self.hist['$[]'](1).curveShape.visible=isTransf & cqls.enyo.app.$.checkHistCurve.getValue();
				self.hist['$[]'](0).summaryShapes[0].visible=false;
				self.hist['$[]'](1).summaryShapes[0].visible=false;
				self.checkTCL.shape.visible=isSample & cqls.enyo.app.$.checkTCL.getValue();
			;
        self.$showExpAxis();
        return self.$showSummary();
      };

      def.$showExpAxis = function() {
        var $a, self = this, isTransf = nil;
        isTransf = ($a = self.$transfMode()['$==']("none"), ($a === nil || $a === false));
        self.exp['$[]'](0).expAxisShape.visible= !cqls.enyo.app.$.checkExp0Curve.getValue();
        return self.exp['$[]'](1).expAxisShape.visible= !cqls.enyo.app.$.checkExp0Curve.getValue() & isTransf;
      };

      def.$drawSummary = function(cur) {
        var self = this, state = nil;
        if (cur == null) {
          cur = self.curIndHist
        }
        self.hist['$[]'](cur).$drawMean();
        self.hist['$[]'](cur).$drawSD();
        state = cqls.enyo.app.$.checkSummary.getValue();
        self.hist['$[]'](cur).summaryShapes[0].visible=state;
        return self.hist['$[]'](cur).summaryShapes[1].visible=state;
      };

      def.$showSummary = function() {
        var $a, self = this, state = nil, isTransf = nil;
        state = cqls.enyo.app.$.checkSummary.getValue();
        isTransf = ($a = self.$transfMode()['$==']("none"), ($a === nil || $a === false));
        self.exp['$[]'](0).summaryShapes[0].visible=state & cqls.enyo.app.$.checkExp0Curve.getValue();
        self.exp['$[]'](0).summaryShapes[1].visible=state & cqls.enyo.app.$.checkExp1Curve.getValue();
        self.exp['$[]'](1).summaryShapes[0].visible=(($a = state !== false && state !== nil) ? isTransf : $a) & cqls.enyo.app.$.checkExp0Curve.getValue();
        self.exp['$[]'](1).summaryShapes[1].visible=(($a = state !== false && state !== nil) ? isTransf : $a) & cqls.enyo.app.$.checkExp1Curve.getValue();
        self.histCur.summaryShapes[0].visible=state;
        return self.histCur.summaryShapes[1].visible=state;
      };

      def.$playShort = function(cur, duration) {
        var $a, $b, $c, TMP_64, self = this, x = nil;
        if (cur == null) {
          cur = self.curIndHist
        }
        if (duration == null) {
          duration = 500
        }
        self.$hideAll(cur);
        self.time = 0;
        if (($a = ($b = self.transf, $b !== false && $b !== nil ?($c = self.transf['$[]']("dist")['$==']("exact"), ($c === nil || $c === false)) : $b)) !== false && $a !== nil) {
          x = [];
          ($a = ($b = ($range(0, ((10)['$**'](cqls.i.count)), true))).$each, $a._p = (TMP_64 = function(i){var self = TMP_64._s || this;
            if (self.exp == null) self.exp = nil;
            if (self.n == null) self.n = nil;
if (i == null) i = nil;
          return x['$[]='](i, self.$applyTransfByValue(self.exp['$[]'](0).$sample(self.n)))}, TMP_64._s = self, TMP_64), $a).call($b);
          self.hist['$[]'](cur).$add(x);
          } else {
          self.hist['$[]'](cur).$add(self.exp['$[]'](cur).$sample((10)['$**'](cqls.i.count)))
        };
        self.hist['$[]'](cur).$draw();
        self.$drawSummary(cur);
        cqls.m.stage.update();
        return self.$playNextAfter(duration);
      };

      def.$playLongDensityBasic = function(duration) {
        var self = this;
        if (duration == null) {
          duration = 1000
        }
        self.$addXY(self.nbSim);
        self.$transitionInitHist(0);
        self.$transitionInitPts(0);
        self.$transitionInitRects(0);
        self.$transitionDrawPts(0);
        self.$transitionFallPts(0);
        self.$transitionHistPtsAndRects(0);
        return self.$playNextAfter(self.time['$+'](duration));
      };

      def.$playLongDensityBasicHidden = function(duration) {
        var self = this;
        if (duration == null) {
          duration = 1000
        }
        self.$addXY(self.nbSim);
        self.$transitionInitHist(0);
        self.$transitionInitPts(0);
        self.$transitionInitRects(0);
        self.$transitionDrawPts(0);
        self.$transitionFallPts(0);
        self.$transitionHistPtsAndRects(0);
        return self.$playNextAfter(self.time['$+'](duration));
      };

      def.$playLongDensityWithTransf = function(duration) {
        var self = this;
        if (duration == null) {
          duration = 1000
        }
        self.$addXY(self.nbSim);
        self.$transitionInitTransf(0, 1);
        self.$transitionInitHist(0);
        self.$transitionInitHist(1);
        self.$transitionInitPts(0);
        self.$transitionInitPtsTransf(0);
        self.$transitionInitRects(1);
        self.$transitionDrawPts(0);
        self.$transitionPtsTransf(1);
        self.$transitionInitPtsTransf(1);
        self.$transitionDrawPts(1);
        self.$transitionFallPts(1);
        self.$transitionHistPtsAndRects(1);
        return self.$playNextAfter(self.time['$+'](duration));
      };

      def.$playLongDensityWithTransfHidden = function(duration) {
        var self = this;
        if (duration == null) {
          duration = 1000
        }
        self.$addXY(self.nbSim);
        self.$transitionInitTransf(0, 1);
        self.$transitionInitHist(0);
        self.$transitionInitHist(1);
        self.$transitionInitPts(0);
        self.$transitionInitPtsTransf(0);
        self.$transitionInitRects(1);
        self.$transitionDrawPts(0);
        self.$transitionPtsTransf(1);
        self.$transitionInitPtsTransf(1);
        self.$transitionDrawPts(1);
        self.$transitionFallPts(1);
        self.$transitionHistPtsAndRects(1);
        return self.$playNextAfter(self.time['$+'](duration));
      };

      def['$isModeHidden?'] = function() {
        var self = this;
        self.modeHidden = !cqls.enyo.app.$.checkExp0Curve.getValue();
        return self.modeHidden;
      };

      def.$playLongDensity = function(duration) {
        var $a, self = this;
        if (duration == null) {
          duration = 1000
        }
        if (($a = self.transf) !== false && $a !== nil) {
          if (($a = self['$isModeHidden?']()) !== false && $a !== nil) {
            return self.$playLongDensityWithTransfHidden(duration)
            } else {
            return self.$playLongDensityWithTransf(duration)
          }
        } else if (($a = self['$isModeHidden?']()) !== false && $a !== nil) {
          return self.$playLongDensityBasicHidden(duration)
          } else {
          return self.$playLongDensityBasic(duration)
        };
      };

      return (def.$playNextAfter = function(duration) {
        var self = this;
        
				createjs.Tween.get(cqls.m.stage,{override:true}).wait(duration).call(
					function(tween) {if(cqls.i.loop) cqls.f.updateDemo();}
				);
			;
      }, nil);
    })(self, null);

    (function($base, $super) {
      function $Distribution(){};
      var self = $Distribution = $klass($base, $super, 'Distribution', $Distribution);

      var def = $Distribution._proto, $scope = $Distribution._scope;
      def.list = def.name = def.params = def.originalDistrib = def.type = def.distrib = nil;
      self.$attr_accessor("list", "name", "params", "distrib");

      def.$initialize = function(name, params, transf) {
        var $a, $b, self = this;
        if (name == null) {
          name = nil
        }
        if (params == null) {
          params = []
        }
        if (transf == null) {
          transf = nil
        }
        if (($a = (($b = $opal.cvars['@@list']) == null ? nil : $b)) === false || $a === nil) {
          ($opal.cvars['@@list'] = $hash2(["uniform", "normal", "t", "chi2", "cauchy", "discreteUniform", "bernoulli", "binomial", "birthday", "mean", "sum", "locationScale", "square", "sumOfSq"], {"uniform": $hash2(["type", "dist", "qbounds"], {"type": "cont", "dist": ["UniformDistribution"], "qbounds": [0, 1]}), "normal": $hash2(["type", "dist", "qbounds"], {"type": "cont", "dist": ["NormalDistribution"], "qbounds": [cqls.m.qmin, cqls.m.qmax]}), "t": $hash2(["type", "dist", "qbounds"], {"type": "cont", "dist": ["StudentDistribution"], "qbounds": [cqls.m.qmin, cqls.m.qmax]}), "chi2": $hash2(["type", "dist", "qbounds"], {"type": "cont", "dist": ["ChiSquareDistribution"], "qbounds": [0, cqls.m.qmax]}), "cauchy": $hash2(["type", "dist", "qbounds"], {"type": "cont", "dist": ["CauchyDistribution"], "qbounds": [0.01, 0.99]}), "discreteUniform": $hash2(["type", "dist", "qbounds"], {"type": "disc", "dist": ["DiscreteUniformDistribution"], "qbounds": [0, 1]}), "bernoulli": $hash2(["type", "dist", "qbounds"], {"type": "disc", "dist": ["BernoulliDistribution"], "qbounds": [0, 1]}), "binomial": $hash2(["type", "dist", "qbounds"], {"type": "disc", "dist": ["BinomialDistribution"], "qbounds": [0, 1]}), "birthday": $hash2(["type", "dist", "qbounds"], {"type": "disc", "dist": ["BirthdayDistribution"], "qbounds": [0.01, 1]}), "mean": $hash2(["dist", "qbounds"], {"dist": "none", "qbounds": [0, 1]}), "sum": $hash2(["dist", "qbounds"], {"dist": "none", "qbounds": [0, 1]}), "locationScale": $hash2(["dist", "qbounds"], {"dist": "none", "qbounds": [0, 1]}), "square": $hash2(["dist", "qbounds"], {"dist": "none", "qbounds": [0, 1]}), "sumOfSq": $hash2(["dist", "qbounds"], {"dist": "none", "qbounds": [0, 1]})}))};
        self.list = (($a = $opal.cvars['@@list']) == null ? nil : $a);
        if (name !== false && name !== nil) {
          if (transf !== false && transf !== nil) {
            return self.$setAsTransfOf($scope.Distribution.$new(name, params), transf)
            } else {
            return self.$set(name, params)
          }
          } else {
          return nil
        };
      };

      def.$set = function(dist, params) {
        var $a, self = this, instr = nil;
        $a = [dist, params], self.name = $a[0], self.params = $a[1];
        self.type = self.list['$[]'](self.name)['$[]']("type");
        instr = "new "['$+'](self.list['$[]'](self.name)['$[]']("dist").$join("."))['$+']("(")['$+'](self.params.$join(","))['$+'](");");
        return self.distrib = eval(instr);
      };

      def.$setAsTransfOf = function(dist, transf) {
        var $a, $b, TMP_65, self = this, $case = nil, d = nil;
        $a = [transf['$[]']("name"), transf['$[]']("args")], self.name = $a[0], self.params = $a[1];
        self.originalDistrib = dist;
        return (function() {$case = self.name;if ("square"['$===']($case)) {return self.distrib = new PowerDistribution(self.originalDistrib.distrib,2)}else if ("mean"['$===']($case)) {d = new Convolution(self.originalDistrib.distrib,self.params['$[]'](0));
        return self.distrib = new LocationScaleDistribution(d,0,1/self.params['$[]'](0));}else if ("sum"['$===']($case)) {return self.distrib = new Convolution(self.originalDistrib.distrib,self.params['$[]'](0))}else if ("locationScale"['$===']($case)) {return self.distrib = new LocationScaleDistribution(self.originalDistrib.distrib,self.params['$[]'](0),self.params['$[]'](1))}else if ("sumOfSq"['$===']($case)) {d = new LocationScaleDistribution(self.originalDistrib.distrib,-self.originalDistrib.$mean()/self.originalDistrib.$stdDev(),1/self.originalDistrib.$stdDev());
        d = new PowerDistribution(d,2);
        if (($a = d.type === CONT) !== false && $a !== nil) {
          return self.distrib = new Convolution(d,self.params['$[]'](0))
          } else {
          self.distrib = $scope.Convolution.$power(d, self.params['$[]'](0));
          return self.$p(["boundsDistrib", self.$step(), self.$bounds(), self.$pdf(self.$bounds()), ($a = ($b = self.$pdf(self.$bounds())).$inject, $a._p = (TMP_65 = function(e, e2){var self = TMP_65._s || this;if (e == null) e = nil;if (e2 == null) e2 = nil;
          return e = e['$+'](e2)}, TMP_65._s = self, TMP_65), $a).call($b, 0)]);
        };}else { return nil }})();
      };

      def.$type = function() {
        var $a, self = this;
        return ((($a = self.type) !== false && $a !== nil) ? $a : self.originalDistrib.$type());
      };

      def.$qbounds = function() {
        var self = this;
        return self.list['$[]'](self.name)['$[]']("qbounds");
      };

      def.$bounds = function() {
        var $a, $b, TMP_66, $c, $d, TMP_67, TMP_68, self = this, qb = nil, $case = nil, a = nil, b = nil, s = nil;
        qb = (function() {if (($a = self.originalDistrib) !== false && $a !== nil) {
          return self.originalDistrib.$qbounds()
          } else {
          return self.$qbounds()
        }; return nil; })();
        return (function() {$case = self.$type();if ("cont"['$===']($case)) {return ($a = ($b = qb).$map, $a._p = (TMP_66 = function(e){var self = TMP_66._s || this;if (e == null) e = nil;
        return self.$quantile(e)}, TMP_66._s = self, TMP_66), $a).call($b)}else if ("disc"['$===']($case)) {if (($a = self['$regular?']()) !== false && $a !== nil) {
          $a = $opal.to_ary(($c = ($d = qb).$map, $c._p = (TMP_67 = function(e){var self = TMP_67._s || this;if (e == null) e = nil;
          return self.$quantile(e)}, TMP_67._s = self, TMP_67), $c).call($d)), a = ($a[0] == null ? nil : $a[0]), b = ($a[1] == null ? nil : $a[1]);
          s = self.$step();
          return ($a = ($c = $scope.Range.$new(0, ((b['$-'](a))['$/'](s))).$to_a()).$map, $a._p = (TMP_68 = function(e){var self = TMP_68._s || this;if (e == null) e = nil;
          return a['$+'](e['$*'](s))}, TMP_68._s = self, TMP_68), $a).call($c);
          } else {
          return self.distrib.values();
        }}else { return nil }})();
      };

      def.$minValue = function() {
        var self = this;
        return self.distrib.minValue();
      };

      def.$maxValue = function() {
        var self = this;
        return self.distrib.maxValue();
      };

      def['$regular?'] = function() {
        var self = this;
        return self.distrib.regular();
      };

      def.$step = function() {
        var $a, $b, TMP_69, self = this, b = nil;
        if (($a = self['$regular?']()) !== false && $a !== nil) {
          return self.distrib.step();
          } else {
          b = self.$bounds();
          return ($a = ($b = ($range(1, b.$length(), true))).$map, $a._p = (TMP_69 = function(i){var self = TMP_69._s || this;if (i == null) i = nil;
          return (b['$[]'](i)['$-'](b['$[]'](i['$-'](1)))).$abs()}, TMP_69._s = self, TMP_69), $a).call($b).$min().$to_f();
        };
      };

      def.$mean = function() {
        var self = this;
        return self.distrib.mean();
      };

      def.$mode = function() {
        var self = this;
        return self.distrib.mode();
      };

      def.$maxPdf = function() {
        var self = this;
        return self.distrib.maxDensity();
      };

      def.$variance = function() {
        var self = this;
        return self.distrib.variance();
      };

      def.$stdDev = function() {
        var self = this;
        return self.distrib.stdDev();
      };

      def.$sample = function(n) {
        var self = this;
        if (n == null) {
          n = 1
        }
        z=[];for(i=0;i<n;i++) z[i]=self.distrib.simulate();return z
      };

      def.$pdf = function(x) {
        var self = this;
        return x.map(function(e) {return self.distrib.density(e);});
      };

      return (def.$quantile = function(alpha) {
        var self = this;
        return self.distrib.quantile(alpha);
      }, nil);
    })(self, null);

    (function($base, $super) {
      function $Convolution(){};
      var self = $Convolution = $klass($base, $super, 'Convolution', $Convolution);

      var def = $Convolution._proto, $scope = $Convolution._scope;
      def.b1 = def.bounds = nil;
      $opal.defs($scope.Convolution, '$power', function(d, n) {
        var $a, $b, TMP_70, self = this, dist = nil, b = nil, dist2 = nil, b2 = nil;
        if (($a = d instanceof Distribution) !== false && $a !== nil) {
          $a = [d, d.values()], dist = $a[0], b = $a[1];
          $a = [d, d.values()], dist2 = $a[0], b2 = $a[1];
          } else {
          $a = [d.$distrib(), d.$bounds()], dist = $a[0], b = $a[1];
          $a = [d.$distrib(), d.$bounds()], dist2 = $a[0], b2 = $a[1];
        };
        ($a = ($b = ($range(1, n, true))).$each, $a._p = (TMP_70 = function(i){var self = TMP_70._s || this;if (i == null) i = nil;
        dist2 = new Convolution2(dist,dist2,b,b2);
          return b2 = dist2.values();}, TMP_70._s = self, TMP_70), $a).call($b);
        return dist2;
      });

      $opal.defs($scope.Convolution, '$two', function(d, d2) {
        var $a, self = this, dist = nil, b = nil, dist2 = nil, b2 = nil;
        $a = [d.$distrib(), d.$bounds()], dist = $a[0], b = $a[1];
        $a = [d2.$distrib(), d2.$bounds()], dist2 = $a[0], b2 = $a[1];
        return new Convolution2(dist,dist2,b,b2);
      });

      def.$initialize = function(d1, d2, b1, b2) {
        var $a, self = this;
        $a = [d1, d2, b1, b2], self.d1 = $a[0], self.d2 = $a[1], self.b1 = $a[2], self.b2 = $a[3];
        return self.$prepare();
      };

      return (def.$prepare = function() {
        var $a, $b, TMP_71, $c, TMP_73, self = this, ind = nil;
        ind = $hash2([], {});
        ($a = ($b = self.b1).$each_with_index, $a._p = (TMP_71 = function(v1, i1){var self = TMP_71._s || this, $a, $b, TMP_72;
          if (self.b2 == null) self.b2 = nil;
if (v1 == null) v1 = nil;if (i1 == null) i1 = nil;
        return ($a = ($b = self.b2).$each_with_index, $a._p = (TMP_72 = function(v2, i2){var self = TMP_72._s || this, $a, v = nil;if (v2 == null) v2 = nil;if (i2 == null) i2 = nil;
          v = $scope.Cqls.$quantize(v1['$+'](v2));
            if (($a = ind.$keys()['$include?'](v)) !== false && $a !== nil) {
              return ind['$[]'](v)['$<<']([i1, i2])
              } else {
              return ind['$[]='](v, [[i1, i2]])
            };}, TMP_72._s = self, TMP_72), $a).call($b)}, TMP_71._s = self, TMP_71), $a).call($b);
        self.bounds = ind.$keys().$sort();
        self.pdf = [];
        return ($a = ($c = self.bounds).$each_with_index, $a._p = (TMP_73 = function(v, i){var self = TMP_73._s || this, $a, $b, TMP_74;
          if (self.pdf == null) self.pdf = nil;
if (v == null) v = nil;if (i == null) i = nil;
        self.pdf['$[]='](i, 0);
          return ($a = ($b = ind['$[]'](v)).$each, $a._p = (TMP_74 = function(j1, j2){var self = TMP_74._s || this, $a, $b;
            if (self.pdf == null) self.pdf = nil;
            if (self.d1 == null) self.d1 = nil;
            if (self.b1 == null) self.b1 = nil;
            if (self.d2 == null) self.d2 = nil;
            if (self.b2 == null) self.b2 = nil;
if (j1 == null) j1 = nil;if (j2 == null) j2 = nil;
          return ($a = i, $b = self.pdf, $b['$[]=']($a, $b['$[]']($a)['$+'](self.d1.density(self.b1['$[]'](j1))* self.d2.density(self.b2['$[]'](j2)))))}, TMP_74._s = self, TMP_74), $a).call($b);}, TMP_73._s = self, TMP_73), $a).call($c);
      }, nil);
    })(self, null);

    $opal.cdecl($scope, 'PREC4DISC', 0);

    $opal.defs($scope.Cqls, '$quantize', function(x, prec) {
      var self = this;
      if (prec == null) {
        prec = $scope.PREC4DISC
      }
      return parseFloat(x.toFixed(prec));
    });

    $opal.defs($scope.Cqls, '$equal', function(a, b) {
      var self = this;
      return a.toFixed($scope.PREC4DISC)===b.toFixed($scope.PREC4DISC);
    });

    $opal.defs($scope.Cqls, '$range', function(low, high, step) {
      var self = this;
      
			// From: http://phpjs.org/functions
			// +   original by: Waldo Malqui Silva
			// *     example 1: range ( 0, 12 );
			// *     returns 1: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
			// *     example 2: range( 0, 100, 10 );
			// *     returns 2: [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
			// *     example 3: range( 'a', 'i' );
			// *     returns 3: ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']
			// *     example 4: range( 'c', 'a' );
			// *     returns 4: ['c', 'b', 'a']
			var matrix = [];
			var inival, endval, plus;
			var walker = step || 1;
			var chars = false;

			if (!isNaN(low) && !isNaN(high)) {
			inival = low;
			endval = high;
			} else if (isNaN(low) && isNaN(high)) {
			chars = true;
			inival = low.charCodeAt(0);
			endval = high.charCodeAt(0);
			} else {
			inival = (isNaN(low) ? 0 : low);
			endval = (isNaN(high) ? 0 : high);
			}

			plus = ((inival > endval) ? false : true);
			if (plus) {
			while (inival <= endval) {
			  matrix.push(((chars) ? String.fromCharCode(inival) : inival));
			  inival += walker;
			}
			} else {
			while (inival >= endval) {
			  matrix.push(((chars) ? String.fromCharCode(inival) : inival));
			  inival -= walker;
			}
			}

			return matrix;
		
    });

    $opal.defs($scope.Cqls, '$seq', function(min, max, length) {
      var self = this;
      
			var arr = [],
			hival = Math.pow(10, 17 - ~~(Math.log(((max > 0) ? max : -max)) * Math.LOG10E)),
			step = (max * hival - min * hival) / ((length - 1) * hival),
			current = min,
			cnt = 0;
			// current is assigned using a technique to compensate for IEEE error
			for (; current <= max; cnt++, current = (min * hival + step * hival * cnt) / hival)
				arr.push(current);
			return arr;
		
    });
    
  })(self)
})(Opal);
